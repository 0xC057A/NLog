<?xml version="1.0" encoding="utf-8" ?>
<project default="build" xmlns="http://nant.sf.net/NAnt.xsd">
    <tstamp />

    <property name="nlog.debug" value="true" />
    <property name="nlog.optimize" value="true" />
    <property name="nlog.define" value="NANT" />

    <property name="scp.program" value="pscp" />
    <property name="scp.program.args" value="-batch -q" />

    <property name="ssh.program" value="plink" />
    <property name="ssh.program.args" value="-batch" />

    <property name="ndoc.console.exe" value="C:\Program Files\NDoc 1.3\bin\net\1.1\ndocconsole.exe" />
    <property name="prettyprinter.exe" value="tools/PrettyPrinter.exe" />

    <property name="sourceforge.addr" value="jkowalski@nlog.sourceforge.net" />
    <property name="sourceforge.groupdir" value="/home/groups/n/nl/nlog" />
    <property name="csc.warninglevel" value="4" />

    <property name="nlog.package.name" value="${tstamp.date}" unless="${property::exists('nlog.package.name')}" />

    <property name="installer.name" value="nlog-installer-${nlog.package.name}.exe" />
    <property name="source_snapshot.name" value="nlog-${nlog.package.name}-src.zip" />
    <property name="binary_snapshot.name" value="nlog-${nlog.package.name}-bin.zip" />
    <property name="nlogc_snapshot.name" value="nlogc-${nlog.package.name}-bin.zip" />
    <property name="binary_compact_snapshot.name" value="nlog-compact-${nlog.package.name}-bin.zip" />
    <property name="webtest.dir" value="${nant.project.basedir}/webtest" />

    <property name="clover.enabled" value="false" />
    <property name="clover.home" value="C:\Apps\CloverNLog" />

    <target name="configure">
        <call target="configure-${framework::get-target-framework()}" />
        <property name="buildsubdir" value="${framework::get-target-framework()}${if(clover.enabled,'-clover','')}${if(nlog.debug,'-debug','')}" />
        <property name="nlog.dir" value="${nant.project.basedir}/build/${buildsubdir}/bin" unless="${property::exists('nlog.dir')}" />
        <property name="nlogc.dir" value="${nant.project.basedir}/build/${buildsubdir}/nlogc" unless="${property::exists('nlogc.dir')}" />
        <property name="nlog.help.dir" value="build/${buildsubdir}/help" unless="${property::exists('nlog.help.dir')}" />
        <property name="nunit2.report.dir" value="${nant.project.basedir}/build/${buildsubdir}/test_results" />
        <property name="clover.report.dir" value="build/${buildsubdir}/clover_report" />
        <property name="clover.build.dir" value="build/${buildsubdir}/clover" />
        <property name="web.dir" value="build/${buildsubdir}/web" unless="${property::exists('web.dir')}" />
        <property name="helpweb.dir" value="build/${buildsubdir}/helpweb" unless="${property::exists('helpweb.dir')}" />

        <echo message="Building NLog for ${framework::get-target-framework()}" />
        <echo message="Package name: ${nlog.package.name}" />
        <echo message="Target dir: ${nlog.dir}" />

        <mkdir dir="${nlog.dir}" />
    </target>

    <target name="build" depends="configure">
        <call target="build-${framework::get-target-framework()}" />
    </target>

    <target name="debug">
        <property name="nlog.debug" value="true" />
        <property name="nlog.optimize" value="false" />
    </target>

    <target name="release">
        <property name="nlog.debug" value="false" />
        <property name="nlog.optimize" value="true" />
    </target>

    <target name="binary_snapshot" depends="build">
        <zip zipfile="${binary_snapshot.name}">
            <fileset basedir="build/${buildsubdir}">
                <include name="bin/*" />
                <include name="help/NLog.chm" />
            </fileset>
            <fileset basedir=".">
                <include name="LICENSE.txt" />
                <include name="examples/**/*" />
            </fileset>
        </zip>
    </target>

    <target name="nlogc_snapshot" depends="build">
        <zip zipfile="${nlogc_snapshot.name}">
            <fileset basedir="build/${buildsubdir}/nlogc">
                <include name="**/*" />
            </fileset>
            <fileset basedir="src/NLogC">
                <include name="NLogC FAQ.txt" />
            </fileset>
        </zip>
    </target>

    <target name="clean" depends="configure">
        <delete dir="build/${buildsubdir}" failonerror="false" />
    </target>

    <target name="NLog" depends="configure">
        <csc target="library" output="${nlog.dir}/NLog.dll" doc="${nlog.dir}/NLog.xml" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
                <include name="System.Data.dll" />
                <include name="System.Windows.Forms.dll" />
                <include name="System.Web.dll" />
                <include name="System.Web.Services.dll" />
            </references>
        </csc>
    </target>

    <target name="NLog.ComInterop" depends="NLog">
        <csc target="library" output="${nlog.dir}/NLog.ComInterop.dll" doc="${nlog.dir}/NLog.ComInterop.xml" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog.ComInterop">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
        </csc>
    </target>

    <target name="NLog.CompactFramework" depends="NLog">
        <csc target="library" output="${nlog.dir}/NLog.CompactFramework.dll" doc="${nlog.dir}/NLog.CompactFramework.xml" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog.CompactFramework">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
        </csc>
    </target>

    <target name="NLog.Win32" depends="NLog">
        <csc target="library" output="${nlog.dir}/NLog.Win32.dll" doc="${nlog.dir}/NLog.Win32.xml" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog.Win32">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
            </references>
        </csc>
    </target>

    <target name="NLog.DotNet" depends="NLog">
        <!-- don't build it yet - we don't have anything .NET-specific -->
        <csc target="library" output="${nlog.dir}/NLog.DotNet.dll" doc="${nlog.dir}/NLog.DotNet.xml" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog.DotNet">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
            </references>
        </csc>
    </target>

    <target name="NLog.Mono" depends="NLog">
        <!-- don't build it yet - we don't have anything Mono-specific -->
        <csc target="library" output="${nlog.dir}/NLog.Mono.dll" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog.Mono">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
            </references>
        </csc>
    </target>

    <target name="NLog.UnitTests" depends="NLog">
        <copy file="${nant.location}/lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}/nunit.framework.dll" tofile="${nlog.dir}/nunit.framework.dll" />
        <csc target="library" output="${nlog.dir}/NLog.UnitTests.dll" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog.UnitTests">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="${nlog.dir}/nunit.framework.dll" />
            </references>
        </csc>
    </target>

    <target name="NLog.UnitTests.Web" depends="NLog">
        <copy file="${nant.location}/lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}/nunit.framework.dll" tofile="${nlog.dir}/nunit.framework.dll" />
        <csc target="library" output="${nlog.dir}/NLog.UnitTests.Web.dll" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog.UnitTests.Web">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="${nlog.dir}/nunit.framework.dll" />
            </references>
        </csc>
    </target>

    <target name="NLog.Unix" depends="NLog">
        <csc target="library" output="${nlog.dir}/NLog.Unix.dll" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog.Unix">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
            </references>
        </csc>
    </target>

    <target name="NLog.Test" depends="NLog">
        <csc target="exe" output="${nlog.dir}/NLog.Test.exe" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog.Test">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
        </csc>
        <copy file="src/NLog.Test/App.config" tofile="${nlog.dir}/NLog.Test.exe.config" />
        <copy file="src/NLog.Test/Config1.nlog" tofile="${nlog.dir}/Config1.nlog" />
        <copy file="src/NLog.Test/Config2.nlog" tofile="${nlog.dir}/Config2.nlog" />
    </target>

    <target name="NLog.Benchmark" depends="NLog">
        <csc target="exe" output="${nlog.dir}/NLog.Benchmark.exe" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog.Benchmark">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
        </csc>
        <copy file="src/NLog.Benchmark/App.config" tofile="${nlog.dir}/NLog.Benchmark.exe.config" />
    </target>

    <target name="NLogC-1.0">
        <uptodate property="nlogc.uptodate">
            <targetfiles>
                <include name="${nlogc.dir}/bin/net-1.0/NLogC.dll" />
            </targetfiles>
            <sourcefiles basedir="${nlog.dir}">
                <include name="NLog.dll" />
            </sourcefiles>
        </uptodate>
        <if test="${not nlogc.uptodate}">
            <exec program="build_nlogc_net-1.0.bat" workingdir="${nant.project.basedir}" commandline="${string::replace(nlog.dir,'/','\')} ${string::replace(nlogc.dir,'/','\')}" />
        </if>
    </target>

    <target name="NLogC">
        <call target="build-nlogc-${framework::get-target-framework()}" />
        <copy todir="${nlogc.dir}/include">
            <fileset basedir="src/NLogC">
                <include name="NLogC.h" />
                <include name="NLogger.h" />
            </fileset>
        </copy>
    </target>

    <target name="NLogC-1.1">
        <uptodate property="nlogc.uptodate">
            <targetfiles>
                <include name="${nlogc.dir}/bin/net-1.1/NLogC.dll" />
            </targetfiles>
            <sourcefiles basedir="${nlog.dir}">
                <include name="NLog.dll" />
            </sourcefiles>
        </uptodate>
        <if test="${not nlogc.uptodate}">
            <exec program="build_nlogc_net-1.1.bat" workingdir="${nant.project.basedir}" commandline="${string::replace(nlog.dir,'/','\')} ${string::replace(nlogc.dir,'/','\')}" />
        </if>
    </target>

    <target name="NLogC-2.0">
        <uptodate property="nlogc.uptodate">
            <targetfiles>
                <include name="${nlogc.dir}/bin/net-2.0/NLogC.dll" />
            </targetfiles>
            <sourcefiles basedir="${nlog.dir}">
                <include name="NLog.dll" />
            </sourcefiles>
        </uptodate>
        <if test="${not nlogc.uptodate}">
            <exec program="build_nlogc_net-2.0.bat" workingdir="${nant.project.basedir}" commandline="${string::replace(nlog.dir,'/','\')} ${string::replace(nlogc.dir,'/','\')}" />
        </if>
    </target>

    <target name="NLog.Benchmark-log4net" depends="NLog">
        <csc target="exe" output="${nlog.dir}/NLog.Benchmark-log4net.exe" define="${nlog.define},LOG4NET" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog.Benchmark">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/log4net.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
        </csc>
        <copy file="src/NLog.Benchmark/App.config" tofile="${nlog.dir}/NLog.Benchmark-log4net.exe.config" />
    </target>

    <target name="NLog.Benchmark-log4net-withformat" depends="NLog">
        <csc target="exe" output="${nlog.dir}/NLog.Benchmark-log4net-withformat.exe" define="${nlog.define},LOG4NET,LOG4NETWITHFORMAT" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog.Benchmark">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/log4net.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
        </csc>
        <copy file="src/NLog.Benchmark/App.config" tofile="${nlog.dir}/NLog.Benchmark-log4net-withformat.exe.config" />
    </target>

    <target name="NLog.Benchmark-log4net-with-concrete-logger" depends="NLog">
        <csc target="exe" output="${nlog.dir}/NLog.Benchmark-log4net-concrete-logger.exe" define="${nlog.define},LOG4NET_WITH_FASTLOGGER" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLog.Benchmark">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/log4net.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
        </csc>
        <copy file="src/NLog.Benchmark/App.config" tofile="${nlog.dir}/NLog.Benchmark-log4net-withformat.exe.config" />
    </target>

    <target name="NLogViewer" depends="configure, NLogViewer.Interfaces, NLogViewer.NDumbsterSmtpReceiver">
        <csc target="winexe" output="${nlog.dir}/NLogViewer.exe" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLogViewer">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="System.Windows.Forms.dll" />
                <include name="${nlog.dir}/NLogViewer.Interfaces.dll" />
            </references>
            <resources basedir="src/NLogViewer" prefix="NLogViewer" dynamicprefix="true">
                <include name="**/*.resx" />
            </resources>
        </csc>
        <copy file="src/NLogViewer/App.config" tofile="${nlog.dir}/NLogViewer.exe.config" />
    </target>

    <target name="NLogViewer.Interfaces" depends="configure">
        <csc target="library" output="${nlog.dir}/NLogViewer.Interfaces.dll" doc="${nlog.dir}/NLogViewer.Interfaces.xml" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLogViewer.Interfaces">
                <include name="**/*.cs" />
            </sources>
        </csc>
    </target>

    <target name="NLogViewer.NDumbsterSmtpReceiver" depends="configure">
        <copy file="external/nDumbster.dll" tofile="${nlog.dir}/nDumbster.dll" />
        <csc target="library" output="${nlog.dir}/NLogViewer.NDumbsterSmtpReceiver.dll" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}" warninglevel="${csc.warninglevel}">
            <sources basedir="src/NLogViewer.NDumbsterSmtpReceiver">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLogViewer.Interfaces.dll" />
                <include name="${nlog.dir}/nDumbster.dll" />
            </references>
        </csc>
    </target>

    <target name="test" depends="NLog.UnitTests">
        <nunit2 failonerror="false">
            <formatter type="Xml" usefile="true" extension=".xml" outputdir="build/${buildsubdir}/test_results_xml" />
            <test assemblyname="${nlog.dir}/NLog.UnitTests.dll" />
        </nunit2>
    </target>

    <target name="webtest" depends="NLog, NLog.Win32, NLog.ComInterop, NLog.UnitTests.Web">
        <!-- stop IIS on local machine -->
        
        <echo message="Stopping IIS..." />
        <exec program="iisreset.exe" commandline="/stop" />

        <!-- copy binaries to the "bin" directory -->

        <copy todir="${webtest.dir}/bin" verbose="true">
            <fileset basedir="${nlog.dir}">
                <include name="NLog.dll" />
                <include name="NLog.Win32.dll" />
                <include name="NLog.ComInterop.dll" />
                <include name="cloverruntime.dll" />
            </fileset>
        </copy>

        <!-- register NLog.ComInterop.dll COM component -->

        <echo message="Registering COM interop library..." />

        <exec program="${path::combine(framework::get-framework-directory(framework::get-target-framework()),'regasm.exe')}"
            commandline="/tlb /codebase ${webtest.dir}/bin/NLog.ComInterop.dll" />

        <!-- start IIS -->
        
        <echo message="Starting IIS..." />
        <exec program="iisreset.exe" commandline="/start" />

        <sleep seconds="5" />

        <!-- run unit tests -->
        
        <echo message="Running tests..." />

        <nunit2 failonerror="false">
            <formatter type="Xml" usefile="true" extension=".xml" outputdir="build/${buildsubdir}/test_results_xml" />
            <test assemblyname="${nlog.dir}/NLog.UnitTests.Web.dll" />
        </nunit2>

        <sleep seconds="5" />
        
        <echo message="Running tests again..." />
        
        <nunit2 failonerror="false">
            <formatter type="Xml" usefile="true" extension=".xml" outputdir="build/${buildsubdir}/test_results_xml" />
            <test assemblyname="${nlog.dir}/NLog.UnitTests.Web.dll" />
        </nunit2>

        <if test="false">

            <sleep seconds="5" /> <!-- give Clover some time to dump its statistics -->

            <!-- stop IIS -->

            <echo message="Stopping IIS..." />
            <exec program="iisreset.exe" commandline="/stop" />

            <!-- unregister COM components -->

            <echo message="Unregistering COM interop library..." />

            <exec program="${path::combine(framework::get-framework-directory(framework::get-target-framework()),'regasm.exe')}"
                commandline="/unregister /tlb ${webtest.dir}/bin/NLog.ComInterop.dll" if="false" />

            <!-- start IIS -->
            <echo message="Starting IIS..." />
            <exec program="iisreset.exe" commandline="/start" />
        </if>

    </target>

    <target name="dowebtest" depends="NLog, NLog.Win32, NLog.ComInterop, NLog.UnitTests.Web">
        <echo message="Running tests..." />

        <nunit2 failonerror="false">
            <formatter type="Xml" usefile="true" extension=".xml" outputdir="build/${buildsubdir}/test_results_xml" />
            <test assemblyname="${nlog.dir}/NLog.UnitTests.Web.dll" />
        </nunit2>
    </target>

    <target name="benchmark" depends="NLog.Benchmark, build">
        <exec program="${nlog.dir}/NLog.Benchmark.exe" workingdir="${nlog.dir}" />
    </target>

    <target name="benchmark-all">
        <exec program="nant.exe" commandline="-t:net-1.0 release benchmark" if="${framework::exists('net-1.0')}" />
        <exec program="nant.exe" commandline="-t:net-1.1 release benchmark" if="${framework::exists('net-1.1')}" />
        <exec program="nant.exe" commandline="-t:net-2.0 release benchmark" if="${framework::exists('net-2.0')}" />
        <exec program="nant.exe" commandline="-t:mono-1.0 release benchmark" if="${framework::exists('mono-1.0')}" />
    </target>

    <target name="longbenchmark-all">
        <exec program="nant.exe" commandline="-t:net-1.0 release longbenchmark" if="${framework::exists('net-1.0')}" />
        <exec program="nant.exe" commandline="-t:net-1.1 release longbenchmark" if="${framework::exists('net-1.1')}" />
        <exec program="nant.exe" commandline="-t:net-2.0 release longbenchmark" if="${framework::exists('net-2.0')}" />
        <exec program="nant.exe" commandline="-t:mono-1.0 release longbenchmark" if="${framework::exists('mono-1.0')}" />
    </target>

    <target name="configure-mono-1.0">
        <property name="nlog.define" value="${nlog.define};MONO;MONO_1_0" />
    </target>
    <target name="configure-net-1.0" />
    <target name="configure-net-1.1" />
    <target name="configure-net-2.0" />

    <target name="configure-netcf-1.0">
        <property name="nlog.define" value="${nlog.define};NETCF;NETCF_1_0" />
    </target>

    <target name="build-mono-1.0" depends="NLog, NLog.Mono" />
    <target name="build-net-1.0" depends="NLog, NLog.Win32, NLog.ComInterop, NLog.DotNet, NLogViewer, NLogC" />
    <target name="build-net-1.1" depends="NLog, NLog.Win32, NLog.ComInterop, NLog.DotNet, NLogViewer, NLogC" />
    <target name="build-net-2.0" depends="NLog, NLog.Win32, NLog.ComInterop, NLog.DotNet, NLogViewer, NLogC" />
    <target name="build-netcf-1.0" depends="NLog, NLog.CompactFramework" />
    <target name="build-nlogc-net-1.0" depends="NLogC-1.0, NLogC-1.1, NLogC-2.0" />
    <target name="build-nlogc-net-1.1" depends="NLogC-1.1, NLogC-2.0" />
    <target name="build-nlogc-net-2.0" depends="NLogC-2.0" />

    <target name="fullbuild" depends="build, cleanwebsite, doc">
    </target>

    <target name="updateversion">
        <foreach item="Line" in="Nlog.version" delim=";" property="nlog.version">
            <exec workingdir="${nant.project.basedir}" program="tools/ReplaceVersion.exe" commandline=". ${nlog.version}" />
        </foreach>
    </target>

    <target name="publisher_policy">
        <foreach item="Line" in="Nlog.version" delim="." property="nlog.version.major,nlog.version.minor,nlog.version.build,nlog.version.revision">
            <copy file="src/publisher_policy.config.template" tofile="publisher_policy.config" />
            <xmlpoke file="publisher_policy.config" xpath="/configuration/runtime/ms:assemblyBinding/ms:dependentAssembly/ms:bindingRedirect/@newVersion"
                value="${nlog.version.major}.${nlog.version.minor}.${nlog.version.build}.${nlog.version.revision}">
                <namespaces>
                    <namespace prefix="ms" uri="urn:schemas-microsoft-com:asm.v1" />
                </namespaces>
            </xmlpoke>

            <exec program="${path::combine(framework::get-framework-directory(framework::get-target-framework()),'al.exe')}"
                commandline="/nologo /embed:publisher_policy.config /out:Policy.${nlog.version.major}.${nlog.version.minor}.NLog.dll /keyfile:${path::combine(nant.project.basedir,'src/NLog.snk')}" />
        </foreach>
    </target>

    <target name="installer" depends="build">
        <readregistry property="nsis.dir" key="SOFTWARE\NSIS\" />
        <property name="makensis.exe" value="${nsis.dir}/makensis.exe" />

        <exec program="${makensis.exe}" commandline="/DNLOGVERSION=${nlog.package.name} /DBUILDSUBDIR=${buildsubdir} tools\SetupNLog.nsi" />
        <move file="SetupNLog.exe" tofile="${installer.name}" overwrite="true" />
    </target>

    <target name="fulldist">
        <call target="clean" />
        <call target="fullbuild" />
        <call target="installer" />
        <call target="binary_snapshot" />
        <call target="nlogc_snapshot" />
        <call target="source_snapshot" />
    </target>

    <target name="compactdist">
        <call target="clean" />
        <call target="fullbuild" />
        <property name="binary_snapshot.name" value="${binary_compact_snapshot.name}" />
        <call target="binary_snapshot" />
    </target>

    <target name="fullrelease">
        <exec program="nant" commandline="-t:net-1.0 -D:nlog.package.name=${nlog.package.name} release fulldist" />
        <exec program="nant" commandline="-t:netcf-1.0 -D:nlog.package.name=${nlog.package.name} release compactdist" />
    </target>

    <target name="doc" depends="configure, build, xmldoc, website, helpwebsite">
        <copy file="${nant.project.basedir}/web/syntax.xsl" tofile="build/${buildsubdir}/syntax.xsl" />
        <copy file="${nant.project.basedir}/NLog-${framework::get-target-framework()}.ndoc" tofile="build/${buildsubdir}/NLog.ndoc" />
        <copy todir="build/${buildsubdir}/help/examples">
            <fileset basedir="build/${buildsubdir}/helpweb/examples">
                <include name="**/*" />
            </fileset>
        </copy>
        <uptodate property="help.uptodate">
            <targetfiles>
                <include name="${nlog.help.dir}/NLog.chm" />
            </targetfiles>
            <sourcefiles basedir="build/${buildsubdir}">
                <include name="**/*.dll" />
                <include name="web/**/*" />
                <include name="NLog.ndoc" />
            </sourcefiles>
        </uptodate>
        <if test="${not help.uptodate}">
            <exec program="${ndoc.console.exe}" workingdir="build/${buildsubdir}" commandline="-documenter=MSDN -project=NLog.ndoc" />
        </if>
    </target>

    <target name="cleanwebsite" depends="xmldoc, website">
    </target>

    <target name="publish_website" depends="cleanwebsite">
        <zip zipfile="website.zip">
            <fileset basedir="${web.dir}">
                <include name="*" />
            </fileset>
        </zip>
        <echo message="Uploading the zipped website..." />
        <exec program="${scp.program}" commandline="${scp.program.args} website.zip ${sourceforge.addr}:${sourceforge.groupdir}" />
        <echo message="Unpacking the zipped website..." />
        <exec program="${ssh.program}" commandline="${ssh.program.args} ${sourceforge.addr} ${sourceforge.groupdir}/unpack_website.sh" />
        <echo message="Website deployed." />
    </target>

    <target name="publish_test_website" depends="cleanwebsite">
        <zip zipfile="website.zip">
            <fileset basedir="${web.dir}">
                <include name="*" />
            </fileset>
        </zip>
        <echo message="Uploading the zipped website..." />
        <exec program="${scp.program}" commandline="${scp.program.args} website.zip ${sourceforge.addr}:${sourceforge.groupdir}" />
        <echo message="Unpacking the zipped website..." />
        <exec program="${ssh.program}" commandline="${ssh.program.args} ${sourceforge.addr} ${sourceforge.groupdir}/unpack_test_website.sh" />
        <echo message="Website deployed." />
    </target>

    <target name="publish_website_help" depends="doc">
        <zip zipfile="help.zip">
            <fileset basedir="${nlog.help.dir}">
                <include name="**/*" />
                <exclude name="**/NLog.chm" />
            </fileset>
        </zip>
        <echo message="Uploading the zipped help..." />
        <exec program="${scp.program}" commandline="${scp.program.args} help.zip ${sourceforge.addr}:${sourceforge.groupdir}" />
        <echo message="Unpacking the zipped help..." />
        <exec program="${ssh.program}" commandline="${ssh.program.args} ${sourceforge.addr} ${sourceforge.groupdir}/unpack_help.sh" />
        <echo message="Help deployed." />
    </target>

    <target name="publish_clover" depends="clover-html-report">
        <zip zipfile="clover.zip">
            <fileset basedir="${clover.report.dir}">
                <include name="**/*" />
            </fileset>
        </zip>
        <echo message="Uploading the zipped coverage results..." />
        <exec program="${scp.program}" commandline="${scp.program.args} clover.zip ${sourceforge.addr}:${sourceforge.groupdir}" />
        <echo message="Unpacking the zipped coverage results..." />
        <exec program="${ssh.program}" commandline="${ssh.program.args} ${sourceforge.addr} ${sourceforge.groupdir}/unpack_clover.sh" />
        <echo message="Coverage results deployed." />
    </target>

    <target name="source_snapshot">
        <delete dir="build/source_snapshot" if="${directory::exists('build/source_snapshot')}" />
        <property name="snapshot.dir" value="build/source_snapshot/NLog-${nlog.package.name}" />
        <mkdir dir="build/source_snapshot" if="${not directory::exists('build/source_snapshot')}" />
        <exec program="svn" commandline="export . ${snapshot.dir}" />
        <zip zipfile="${source_snapshot.name}">
            <fileset basedir="build/source_snapshot">
                <include name="**/*" />
                <exclude name="_svn" />
            </fileset>
        </zip>
    </target>

    <target name="astyle">
        <astyle style="NAnt" cleanup="true" >
            <fileset>
                <include name="**/*.cs" />
                <exclude name="**/_*.cs" />
            </fileset>
        </astyle>
    </target>

    <target name="sln">
        <solution configuration="Release" solutionfile="NLog.sln" />
    </target>

    <target name="publish_snapshot" depends="fullrelease">
        <echo message="Creating a directory for ${nlog.package.name}..." />
        <exec program="${ssh.program}" commandline="${ssh.program.args} ${sourceforge.addr} mkdir ${sourceforge.groupdir}/htdocs/snapshots/${nlog.package.name}" failonerror="false" />
        <echo message="Uploading ${installer.name}..." />
        <exec program="${scp.program}" commandline="${scp.program.args} ${installer.name} ${sourceforge.addr}:${sourceforge.groupdir}/htdocs/snapshots/${nlog.package.name}/" />
        <echo message="Uploading ${source_snapshot.name}..." />
        <exec program="${scp.program}" commandline="${scp.program.args} ${source_snapshot.name} ${sourceforge.addr}:${sourceforge.groupdir}/htdocs/snapshots/${nlog.package.name}/" />
        <echo message="Uploading ${binary_snapshot.name}..." />
        <exec program="${scp.program}" commandline="${scp.program.args} ${binary_snapshot.name} ${sourceforge.addr}:${sourceforge.groupdir}/htdocs/snapshots/${nlog.package.name}/" />
        <echo message="Uploading ${nlogc_snapshot.name}..." />
        <exec program="${scp.program}" commandline="${scp.program.args} ${nlogc_snapshot.name} ${sourceforge.addr}:${sourceforge.groupdir}/htdocs/snapshots/${nlog.package.name}/" />
        <echo message="Uploading ${binary_compact_snapshot.name}..." />
        <exec program="${scp.program}" commandline="${scp.program.args} ${binary_compact_snapshot.name} ${sourceforge.addr}:${sourceforge.groupdir}/htdocs/snapshots/${nlog.package.name}/" />
        <echo message="Uploading ChangeLog..." />
        <exec program="${scp.program}" commandline="${scp.program.args} ChangeLog ${sourceforge.addr}:${sourceforge.groupdir}/htdocs/snapshots/${nlog.package.name}/" />
        <echo message="Fixing permissions..." />
        <exec program="${ssh.program}" commandline="${ssh.program.args} ${sourceforge.addr} ${sourceforge.groupdir}/fix_group_perm.sh" />
    </target>

    <target name="xmldoc" depends="build">
        <uptodate property="xmldoc.uptodate">
            <targetfiles>
                <include name="build/${buildsubdir}/doc.xml" />
            </targetfiles>
            <sourcefiles basedir="build/${buildsubdir}">
                <include name="**/*.dll" />
            </sourcefiles>
        </uptodate>
        <if test="${not xmldoc.uptodate}">
            <copy file="${nant.project.basedir}/NLog-${framework::get-target-framework()}.ndoc" tofile="build/${buildsubdir}/NLog.ndoc" />
            <exec program="${ndoc.console.exe}" workingdir="build/${buildsubdir}" commandline="-documenter=XML -project=NLog.ndoc" />
        </if>
        <echo message="Getting target, filter and layout renderer names from build/${buildsubdir}/doc.xml ..." />
        <script language="C#">
            <code><![CDATA[
                public static void ScriptMain(Project project) {
                    System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
                    doc.Load(project.ExpandProperties("${nant.project.basedir}/build/${buildsubdir}/doc.xml", Location.UnknownLocation));
                    string targets = "";
                    string layoutRenderers = "";
                    string filters = "";
                    foreach (System.Xml.XmlNode node in doc.SelectNodes("//attribute[@name='NLog.TargetAttribute']/property[@name='Name']/@value"))
                    {
                        if (targets != "")
                            targets += ",";
                        targets += node.InnerText;
                    }
                    foreach (System.Xml.XmlNode node in doc.SelectNodes("//attribute[@name='NLog.LayoutRendererAttribute']/property[@name='FormatString']/@value"))
                    {
                        if (layoutRenderers != "")
                            layoutRenderers += ",";
                        layoutRenderers += node.InnerText;
                    }
                    foreach (System.Xml.XmlNode node in doc.SelectNodes("//attribute[@name='NLog.FilterAttribute']/property[@name='Name']/@value"))
                    {
                        if (filters != "")
                            filters += ",";
                        filters += node.InnerText;
                    }

                    project.Properties["nlog.targetNames"] = targets;
                    project.Properties["nlog.layoutRendererNames"] = layoutRenderers;
                    project.Properties["nlog.filterNames"] = filters;
                  
                }
                ]]></code>
        </script>

    </target>

    <target name="website" depends="configure">
        <property name="webbuild.dir" value="${web.dir}" />
        <property name="web.buildmode" value="web" />
        <property name="web.sourceforge" value="1" />
        <call target="buildwebsite" />
        <copy file="${web.dir}/introduction.html" tofile="${web.dir}/index.html" />
    </target>

    <target name="helpwebsite" depends="configure">
        <property name="webbuild.dir" value="${helpweb.dir}" />
        <property name="web.buildmode" value="help" />
        <property name="web.sourceforge" value="0" />
        <call target="buildwebsite" />
    </target>

    <target name="buildwebsite" depends="configure, xmldoc">
        <mkdir dir="${webbuild.dir}" />
        <mkdir dir="${webbuild.dir}/examples" />

        <copy todir="${webbuild.dir}">
            <fileset basedir="web">
                <include name="*.css" />
                <include name="*.png" />
                <include name="*.jpg" />
                <include name="*.gif" />
            </fileset>
        </copy>

        <copy todir="${webbuild.dir}/examples">
            <fileset basedir="examples">
                <include name="**/*" />
            </fileset>
        </copy>

        <!-- syntax-hilite all *.cs files -->

        <foreach item="File" property="filename">
            <in>
                <items basedir="${webbuild.dir}/examples">
                    <include name="**/*.cs" />
                </items>
            </in>
            <do>
                <uptodate property="file.uptodate">
                    <targetfiles>
                        <include name="${filename}.html" />
                    </targetfiles>
                    <sourcefiles>
                        <include name="${filename}" />
                    </sourcefiles>
                </uptodate>
                <if test="${not file.uptodate}">
                    <echo message="Syntax-highlighting ${filename}" />
                    <exec program="${prettyprinter.exe}" commandline='-l csharp -i "${filename}" -o "${filename}.html" -s style.css' />
                    <exec program="${prettyprinter.exe}" commandline='-l csharp -m xml -i "${filename}" -o "${filename}.xhtml" -s style.css' />
                </if>
            </do>
        </foreach>

        <foreach item="File" property="filename">
            <in>
                <items basedir="${webbuild.dir}/examples">
                    <include name="**/*.js" />
                </items>
            </in>
            <do>
                <copy file="web/style.css" tofile="${path::combine(path::get-directory-name(filename),'style.css')}" />
                <uptodate property="file.uptodate">
                    <targetfiles>
                        <include name="${filename}.html" />
                    </targetfiles>
                    <sourcefiles>
                        <include name="${filename}" />
                    </sourcefiles>
                </uptodate>
                <if test="${not file.uptodate}">
                    <echo message="Syntax-highlighting ${filename}" />
                    <exec program="${prettyprinter.exe}" commandline='-l jscript -i "${filename}" -o "${filename}.html" -s style.css' />
                    <exec program="${prettyprinter.exe}" commandline='-l jscript -m xml -i "${filename}" -o "${filename}.xhtml" -s style.css' />
                </if>
            </do>
        </foreach>

        <foreach item="File" property="filename">
            <in>
                <items basedir="${webbuild.dir}/examples">
                    <include name="**/*.nlog" />
                </items>
            </in>
            <do>
                <copy file="web/style.css" tofile="${path::combine(path::get-directory-name(filename),'style.css')}" />
                <uptodate property="file.uptodate">
                    <targetfiles>
                        <include name="${filename}.html" />
                    </targetfiles>
                    <sourcefiles>
                        <include name="${filename}" />
                    </sourcefiles>
                </uptodate>
                <if test="${not file.uptodate}">
                    <echo message="Syntax-highlighting ${filename}" />
                    <exec program="${prettyprinter.exe}" commandline='-l xml -i "${filename}" -o "${filename}.html" -s style.css' />
                    <exec program="${prettyprinter.exe}" commandline='-l xml -m xml -i "${filename}" -o "${filename}.xhtml" -s style.css' />
                </if>
            </do>
        </foreach>

        <foreach item="File" property="filename">
            <in>
                <items basedir="${webbuild.dir}/examples">
                    <include name="*.config" />
                </items>
            </in>
            <do>
                <copy file="web/style.css" tofile="${path::combine(path::get-directory-name(filename),'style.css')}" />
                <uptodate property="file.uptodate">
                    <targetfiles>
                        <include name="${filename}.html" />
                    </targetfiles>
                    <sourcefiles>
                        <include name="${filename}" />
                    </sourcefiles>
                </uptodate>
                <if test="${not file.uptodate}">
                    <echo message="Syntax-highlighting ${filename}" />
                    <exec program="${prettyprinter.exe}" commandline='-l xml -i "${filename}" -o "${filename}.html" -s style.css' />
                    <exec program="${prettyprinter.exe}" commandline='-l xml -m xml -i "${filename}" -o "${filename}.xhtml" -s style.css' />
                </if>
            </do>
        </foreach>

        <foreach item="String" in="${nlog.targetNames}" delim="," property="t">
            <style out="${webbuild.dir}/target.${t}.html" style="web/targets.xsl" in="build/${buildsubdir}/doc.xml">
                <parameters>
                    <parameter name="external-base" value="" />
                    <parameter name="file_extension" value="html" />
                    <parameter name="sourceforge" value="${web.sourceforge}" />
                    <parameter name="page_id_override" value="reference" />
                    <parameter name="subpage_id_override" value="targets" />
                    <parameter name="mode" value="${web.buildmode}" />
                    <parameter name="target_name" value="${t}" />
                </parameters>
            </style>
        </foreach>

        <foreach item="String" in="${nlog.layoutRendererNames}" delim="," property="t">
            <style out="${webbuild.dir}/lr.${t}.html" style="web/layoutrenderers.xsl" in="build/${buildsubdir}/doc.xml">
                <parameters>
                    <parameter name="external-base" value="" />
                    <parameter name="file_extension" value="html" />
                    <parameter name="sourceforge" value="${web.sourceforge}" />
                    <parameter name="page_id_override" value="reference" />
                    <parameter name="subpage_id_override" value="layoutrenderers" />
                    <parameter name="mode" value="${web.buildmode}" />
                    <parameter name="lr_name" value="${t}" />
                </parameters>
            </style>
        </foreach>

        <foreach item="String" in="${nlog.filterNames}" delim="," property="t">
            <style out="${webbuild.dir}/filter.${t}.html" style="web/filters.xsl" in="build/${buildsubdir}/doc.xml">
                <parameters>
                    <parameter name="external-base" value="" />
                    <parameter name="file_extension" value="html" />
                    <parameter name="sourceforge" value="${web.sourceforge}" />
                    <parameter name="page_id_override" value="reference" />
                    <parameter name="subpage_id_override" value="filters" />
                    <parameter name="mode" value="${web.buildmode}" />
                    <parameter name="filter_name" value="${t}" />
                </parameters>
            </style>
        </foreach>

        <style out="${webbuild.dir}/targets.html" style="web/targets.xsl" in="build/${buildsubdir}/doc.xml">
            <parameters>
                <parameter name="external-base" value="" />
                <parameter name="file_extension" value="html" />
                <parameter name="sourceforge" value="${web.sourceforge}" />
                <parameter name="page_id_override" value="reference" />
                <parameter name="subpage_id_override" value="targets" />
                <parameter name="mode" value="${web.buildmode}" />
            </parameters>
        </style>

        <style out="${webbuild.dir}/layoutrenderers.html" style="web/layoutrenderers.xsl" in="build/${buildsubdir}/doc.xml">
            <parameters>
                <parameter name="external-base" value="" />
                <parameter name="file_extension" value="html" />
                <parameter name="sourceforge" value="${web.sourceforge}" />
                <parameter name="page_id_override" value="reference" />
                <parameter name="subpage_id_override" value="layoutrenderers" />
                <parameter name="mode" value="${web.buildmode}" />
            </parameters>
        </style>
        
        <style out="${webbuild.dir}/filters.html" style="web/filters.xsl" in="build/${buildsubdir}/doc.xml">
            <parameters>
                <parameter name="external-base" value="" />
                <parameter name="file_extension" value="html" />
                <parameter name="sourceforge" value="${web.sourceforge}" />
                <parameter name="page_id_override" value="reference" />
                <parameter name="subpage_id_override" value="filters" />
                <parameter name="mode" value="${web.buildmode}" />
            </parameters>
        </style>
        
        <style destdir="${webbuild.dir}" style="web/style.xsl">
            <infiles basedir="web">
                <include name="*.xml" />
                <exclude name="common.en.xml" />
            </infiles>
            <parameters>
                <parameter name="external-base" value="" />
                <parameter name="file_extension" value="html" />
                <parameter name="sourceforge" value="${web.sourceforge}" />
                <parameter name="mode" value="${web.buildmode}" />
            </parameters>
        </style>
    </target>
    
    <target name="load-clover">
        <loadtasks assembly="${clover.home}\CloverNAnt-0.85.dll" />
    </target>

    <target name="clover" depends="load-clover">
        <property name="clover.enabled" value="true" />
        <call target="configure" />
        <delete file="${clover.build.dir}/clover.cdb" failonerror="false" />
        <clover-setup 
            initstring="${clover.build.dir}/clover.cdb"
            builddir="${clover.build.dir}"
            enabled="${clover.enabled}"
            flushinterval="100">
            <fileset basedir="src">
                <include name="**/*" />
                <exclude name="NLog.UnitTests.Web/**/*" />
            </fileset>
        </clover-setup>
    </target>

    <target name="clover-html-report" depends="load-clover">
        <property name="clover.enabled" value="true" />
        <call target="configure" />
        <clover-setup 
            initstring="${clover.build.dir}/clover.cdb"
            builddir="${clover.build.dir}"
            enabled="${clover.enabled}"
            flushinterval="100"
            />
        <clover-report>
            <current title="NLog Coverage" output="${clover.report.dir}">
                <format type="html" />
            </current>
        </clover-report>
    </target>

    <target name="coverage_test">
        <call target="clover" />
        <call target="test" />
        <call target="webtest" />
        <call target="clover-html-report" />
    </target>

    <target name="load-nunit2report">
        <loadtasks assembly="tools/nunit2report/NAnt.NUnit2ReportTasks.dll" />
    </target>

    <target name="setup_unittest_website">
        <mkiisdir dirpath="${nant.project.basedir}/nlogtest" vdirname="nlogtest" 
            authntlm="false" 
            authanonymous="true" 
            authbasic="false" 
            failonerror="false"
            />
    </target>

    <target name="nunit2report" depends="load-nunit2report, test">
        <nunit2report format="frames" todir="${nunit2.report.dir}" verbose="true">
            <fileset>
                <include name="build/${buildsubdir}/test_results_xml/*.xml" />
            </fileset>
        </nunit2report>
    </target>

    <target name="publish_nunit2report" depends="nunit2report">
        <zip zipfile="nunit2report.zip">
            <fileset basedir="${nunit2.report.dir}">
                <include name="**/*" />
            </fileset>
        </zip>
        <echo message="Uploading the zipped nunit2report results..." />
        <exec program="${scp.program}" commandline="${scp.program.args} nunit2report.zip ${sourceforge.addr}:${sourceforge.groupdir}" />
        <echo message="Unpacking the zipped nunit2report results..." />
        <exec program="${ssh.program}" commandline="${ssh.program.args} ${sourceforge.addr} ${sourceforge.groupdir}/unpack_nunit2report.sh" />
        <echo message="NUnit2report results deployed." />
    </target>

    <target name="sourceforge_release">
        <exec program="nant" commandline="publish_nunit2report" />
        <exec program="nant" commandline="clover test publish_clover" />
    </target>

</project>
