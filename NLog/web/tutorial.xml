<?xml version="1.0" encoding="windows-1250" ?>
<?xml-stylesheet type="text/xsl" href="style.xsl" ?>
<content lang="en" id="tutorial">
    <h1>Tutorial</h1>

    <h3>Basic concepts</h3>
    <p>NLog is a log routing engine. It processes log messages that are output by the components of your program,
        formats them according to your preference and outputs them to one or more place based on a set of rules.</p>

    <p>The following are the two objects you will use most:</p>
    <ul>
        <li><b><code>Logger</code></b> - is an object you write your log messages to. Usually you create 
            just one such object for each class, typically making it a static member of your class and write 
            your messages to it.</li>
        <li><b><code>LogManager</code></b> - is a logger factory that creates specific loggers on request.
            It also manages the logging configuration.</li>
    </ul>

    <p>The following are additional objects that you may happen to use with NLog. They are usually automatically 
        created and managed by NLog but you may need to use them in some cases.</p>
    <ul>
        <li><b><code>LoggingConfiguration</code></b> - is a set of rules that define the way the messages are routed. 
            Typically <code>LoggingConfiguration</code> is created automatically from the <link href="config">configuration file</link> but
            you can also manipulate it programmatically.</li>
        <li><b><code>Appender</code></b> - is an object responsible for writing out log messages to a persistent
            medium (for example, a file). Appenders are typically created automatically from the <link href="config">configuration file</link> but
            you can also manipulate them programmatically.</li>
        <li><b><code>LayoutAppender</code></b> - is an object responsible for writing out pieces of logging information that
            constitute a log message. For example, there's a layout appender that's responsible for writing out a date, 
            another one prints out a class name and method name, some other writes current thread's identity and so on. 
            LayoutAppenders are groupped to create <code>Layout</code>s.</li>
        <li><p><b><code>Layout</code></b> - is a string to be written to the <code>Appender</code> with embedded
                placeholders for layoutappenders.</p><p>For example: <code>${longdate}|${level}|${message}</code> is
                a layout consisting of: a long date (YYYY-MM-DD HH:MI:SS.MMM), a pipe character, log level, a pipe
                character and finally a log message. When you use this layout with a file appender, it will cause the log messages
                to be formatted accordingly. <code>Layout</code>s are also used in many other places (for example to specify 
                file names).</p></li>
        <li><b><code>Filter</code></b> - is an object responsible for selective elimination of unneeded log output.
            It is invoked before the appender and can prevent or force logging.</li>
    </ul>

    <h3>Logger levels</h3>
    <p>
        There are 5 predefined logging levels. They are: <code>Debug, Info, Warn, Error, Fatal</code>.
    </p>
    <div class="table">
        <table>
            <col width="10%" />
            <col width="90%" />
            <tr>
                <th>Log Level</th>
                <th>Meaning</th>
            </tr>
            <tr>
                <td>Debug</td>
                <td>Messages useful for debugging, not normally enabled. This level can include high-traffic messages like the ones you write at each method call.</td>
            </tr>
            <tr>
                <td>Info</td>
                <td>Normal informational messages. Typically low traffic information - like "user logged on", "user authenticated".</td>
            </tr>
            <tr>
                <td>Warn</td>
                <td>Warning messages.</td>
            </tr>
            <tr>
                <td>Error</td>
                <td>Error messages.</td>
            </tr>
            <tr>
                <td>Fatal</td>
                <td>Fatal error messages. You usually write just one such message - just before the application terminates.</td>
            </tr>
        </table>
    </div>
<h3>Logger usage</h3>
<p>Usage is simple. Just get an instance of a <code>Logger</code> from the <code>LogManager</code> and 
    write your messages to it like you do with <code>Console.WriteLine()</code>. To write a message at a particular
    level use a method that's named after the level.</p>
<p>The following code example shows what's available:</p>

<cs src="examples/tutorial.cs" />
<h3>Log output</h3>
<p>By default, all log messages are displayed on standard output. NLog gives you the possibility
    to change it. You create many log outputs and selectively route your messages to them.
    The simplest way to do it is to create a configuration file section in your configuration file.
</p>
<p>See the <link href="config">NLog Configuration Options</link> and <link href="appenders">Appender Reference</link> for more information.</p>
<p>
    In the following example we define 4 log targets (appenders). Here are the logging rules:
    <ol>
        <li><code>Info, Warn</code> and <code>Error</code> messages are printed on the console.</li>
        <li>All <code>Debug</code> messages go to <code>file1.log</code></li>
        <li>All <code>Error</code> and <code>Fatal</code> messages go to <code>file2.log</code>. This is indicated by <code>minlevel</code> attribute.</li>
        <li>All messages from loggers having SQL in their name go to <code>file3.log</code>.</li>
    </ol>
</p>
<xml-example src="examples/config6.nlog" />
<h3>Log output formatting</h3>
<p>See the <link href="layoutappenders">Layout Appender Reference</link> for more information. Tutorial will be added here soon.</p>

<h3>Log output filtering</h3>
<p>See the <link href="filters">Filter Reference</link> for more information. Tutorial will be added here soon.</p>
    </content>
