<?xml version="1.0" encoding="windows-1250" ?>
<?xml-stylesheet type="text/xsl" href="style.xsl" ?>
<content lang="en" id="">
    <h1>Zaawansowane úledzenie aplikacji z wykorzystaniem NLog</h1>
    <p>Autor: Jaros≥aw Kowalski &lt;jaak@jkowalski.net&gt;</p>
    <p>
        Niniejszy artyku≥ opisuje wykorzystanie biblioteki NLog do zarzπdzania informacjami 
        diagnostycznymi generowanymi przez aplikacjÍ w trakcie pracy.
        åledzenie (inaczej logowanie) polega na zapisywaniu komunikatÛw 
        diagnostycznych (logÛw) tak, 
        aby moøliwa by≥a ich analiza na bieøπco lub po zakoÒczeniu dzia≥ania programu. 
        Zwykle komunikaty zapisywane sπ do pliku, lecz moøna teø wykorzystywaÊ inne 
        mechanizmy (systemowy dziennik zdarzeÒ, do≥πczony debugger, konsole
        zarzπdzania i inne).
    </p>
    <p>
        åledzenie to bardzo przydatna technika pozwalajπca przyjrzeÊ siÍ pracy
        aplikacji zarÛwno podczas jej tworzenia jak i w úrodowisku produkcyjnym (gdzie 
        uruchomienie debuggera nie jest moøliwe). 
    </p>
    <p>
        NLog pozwala w elastyczny sposÛb zarzπdzaÊ informacjami diagnostycznymi pozwalajπc 
        decydowaÊ o takich aspektach logowania, jak:
    </p>
    <ul>
        <li><b>filtrowanie</b> - czyli decydowanie o tym, ktÛre logi generowane przez 
            aplikacjÍ powinny byÊ zapisane a ktÛre odrzucone.</li>
        <li><b>formatowanie</b> - czyli okreúlanie w jaki sposÛb informacje diagnostyczne
            powinny byú sformatowane i wzbogacone o dane kontekstowe.</li>
        <li><b>zapisywanie</b> - czyli okreúlenie miejsca, do ktÛrego powinny byÊ 
            zapisywane logi.</li>
    </ul>
    <h2>èrÛd≥a i poziomy komunikatÛw diagnostycznych</h2>
    <p>
        Przy korzystaniu z biblioteki NLog, kaødy komunikat diagnostyczny ma okreúlone  
        <b>ürÛd≥o</b> i <b>poziom waønoúci</b>. Na podstawie ürÛd≥a i poziomu waønoúci moøliwe 
        jest filtrowanie i sterowanie przep≥ywem komunikatÛw, dlatego istotne jest 
        zdefiniowanie i utrzymanie spÛjnej konwencji ich stosowania.
        èrÛd≥o najczÍúciej identyfikuje klasÍ, ktÛra emituje komunikaty diagnostyczne, ale nie 
        jest to bezwzglÍdnie wymagane i moøliwe sπ inne podejúcia. 
    </p>
    <p>
        Okreúlone sπ nastÍpujπce poziomy waønoúci: 
    </p>
    <p>
        <div class="table">
            <table>
                <tr>
                    <th>Poziom</th>
                    <th>Opis</th>
                </tr>
                <tr>
                    <td valign="top">Trace</td>
                    <td valign="top">Komunikaty techniczne najniøszego poziomu, potencjalnie bardzo liczne i 
                        zawierajπce duøe iloúci informacji, ktÛre mogπ byÊ interesujπce tylko dla programisty. 
                        Te poziom waønoúci nie powinien byÊ nigdy uøywany w úrodowisku produkcyjnym.</td>
                </tr>
                <tr>
                    <td valign="top">Debug</td>
                    <td valign="top">Komunikaty techniczne nieco wyøszego poziomu niø Debug, ktÛre mogπ 
                        pomÛc administratorom i pracownikom dzia≥Ûw wsparcia aplikacji w diagnozowaniu
                        problemÛw z jej dzia≥aniem.
                    </td>
                </tr>
                <tr>
                    <td valign="top">Info</td>
                    <td valign="top">Komunikaty informacyjne, zwykle niezbyt czÍste, informujπce o zdarzeniach podczas 
                        poprawnego dzia≥ania aplikacji. Przyk≥ad "<i>Uøytkownik jkowalski zosta≥ zalogowany</i>".
                        W úrodowisku produkcyjnym aplikacji jest to poziom waønoúci poniøej ktÛrego zwykle 
                        informacje nie sπ zapisywane, wiÍc jeúli jakaú informacja musi byÊ rejestrowana zawsze, naleøy
                        uøyÊ tego poziomu waønoúci.</td>
                </tr>
                <tr>
                    <td valign="top">Warn</td>
                    <td valign="top">Ostrzeøenia, zwykle doúÊ rzadkie. Ten poziom waønoúci powinien
                        byÊ wykorzystywany do przekazywania informacji, na ktÛre powinni zwracaÊ uwagÍ pracownicy
                        wsparcia technicznego. Pomimo wyemitowania ostrzeøenia, aplikacja dzia≥a dalej. 
                        Przyk≥adowe ostrzeøenie: "<i>Zapytanie trwa≥o zbyt d≥ugo: SELECT * FROM Tabela</i>"
                        </td>
                </tr>
                <tr>
                    <td valign="top">Error</td>
                    <td valign="top">B≥Ídy, zwykle doúÊ rzadkie. Ten poziom waønoúci powinien
                        byÊ wykorzystywany do przekazywania informacji, na ktÛre powinni zwracaÊ uwagÍ pracownicy
                        wsparcia technicznego</td>
                </tr>
                <tr>
                    <td valign="top">Fatal</td>
                    <td valign="top">B≥Ídy krytyczne - zwykle powodujπce niemoøliwoúÊ dalszego dzia≥ania aplikacji.
                    </td>
                </tr>
            </table>
        </div>
    </p>
    <h2>API</h2>
    <p>
        Aby aplikacja mog≥a wypisaÊ komunikat diagnostyczny, musi pobraÊ obiekt reprezentujπcy 
        ürÛd≥o i wo≥ajπc odpowiedniπ metodÍ okreúliÊ treúÊ i poziom waønoúci komunikatu.
        èrÛd≥a reprezentowane sπ przez obiekty klasy <code>Logger</code> (zwane od tej
        pory loggerami). Klasa <code>Logger</code> udostÍpnia metody o nazwach takich 
        jak poziomy waønoúci, wywo≥anie jednej z takich metod oznacza wypisanie 
        komunikatu na okreúlonym poziomie logowania.
    </p>
    <p>
        Tworzeniem loggerÛw zajmuje siÍ <code>LogManager</code>. Interfejs programistyczny (API),
        ktÛry udostÍpnia NLog jest wiÍc w za≥oøeniach podobny do interfejsu jaki
        udostÍpnia biblioteka log4net [1]. Interfejs NLoga jest w stosunku do log4net nieco rozszerzony i zoptymalizowany pod 
        wzglÍdem wydajnoúci, co zostanie omÛwione w dalszej czÍúci artyku≥u.
    </p>
    <p>
        Poniøszy przyk≥ad pokazuje jak moøna utworzyÊ logger i wypisaÊ za jego poúrednictwem komunikaty o 
        rÛønych poziomach waønoúci.
    </p>
    <cs inline="true" src="examples/article1.cs" />
    <h2>Konfiguracja logowania</h2>
    <p>
        Aby komunikaty diagnostyczne mog≥y byÊ gdziekolwiek zapisane, naleøy 
        okreúliÊ konfiguracjÍ logowania, ktÛra okreúli sposÛb filtrowania, formatowania i 
        zapisywania logÛw aplikacji. NLog konfiguruje siÍ automatycznie na podstawie podstawie 
        tekstowego pliku konfiguracyjnego w formacie XML. W najprostszym scenariuszu plik ma
        nazwÍ <code>NazwaAplikacji.exe.nlog</code> lub <code>Web.nlog</code> dla aplikacji ASP.NET.
        Moøliwoúci automatycznej konfiguracji jest znacznie wiÍcej (w szczegÛlnoúci moøna wykorzystaÊ plik
        <code>App.config</code>), wszystkie one sπ wymienione w dokumentacji projektu a czÍúÊ zostanie 
        wspomniana w dalszej czÍúci artyku≥u.
    </p>
    <p>
        Poniøszy listing pokazuje najprostszπ konfiguracjÍ logowania, ktÛra wypisuje 
        wszystkie komunikaty na standardowe wyjúcie procesu (w oknie konsoli) w uk≥adzie "data komunikat":
    </p>
    <pre class="csharp">
        2005-05-01 20:30:12.234 komunikat1
        2005-05-01 20:30:12.234 komunikat2
        2005-05-01 20:30:12.234 komunikat3
        2005-05-01 20:30:12.234 komunikat4
        2005-05-01 20:30:12.234 komunikat5</pre>
    <xml inline="true" src="examples/article3.nlog" />
    <p>
        Moøemy wyrÛøniÊ dwie zasadnicze sekcje: <code>&lt;targets&gt;</code>
        oraz <code>&lt;rules&gt;</code>. Pierwsza definiuje wyjúcia komunikatÛw diagnostycznych,
        druga steruje filtrowaniem i przep≥ywem komunikatÛw diagnostycznych ze ürÛde≥ do
        wyjúÊ.
    </p>
    <p>
        Widzimy zdefiniowane jedno wyjúcie o nazwie <code>konsola</code> typu <code>Console</code> z okreúlonym
        formatem wypisywanej informacji <pre class="xml">${longdate} ${message}</pre>
    </p>
    <p>
        Jedyna regu≥a zawarta w elemencie <code>&lt;logger&gt;</code> nakazuje, aby wszystkie komunikaty
        o poziomie waønoúci <code>Debug</code> lub wyøszym (czyli z wy≥πczeniem <code>Trace</code>)
        trafia≥y do wyjúcia o nazwie <code>konsola</code>.
    </p>
    <h2>DostÍpne wyjúcia</h2>
    <p>
        NLog standardowo wspiera nastÍpujπce rodzaje wyjúÊ (wymieniono tylko najwaøniejsze):
    </p>

    <div class="table">
        <table>
            <tr>
                <th>Nazwa</th>
                <th>Opis</th>
            </tr>
            <tr>
                <td>ASPNetTrace</td>
                <td>Zapisuje komunikaty do ASP.NET Trace (dostÍpnej nastÍpnie przez stronÍ Trace.axd)</td>
            </tr>
            <tr>
                <td>Console</td>
                <td>Wypisuje komunikaty na standardowe wyjúcie (lub wyjúcie dla b≥ÍdÛw) procesu</td>
            </tr>
            <tr>
                <td>Database</td>
                <td>Zapisuje komunikaty do bazy danych przy uøyciu ADO.NET</td>
            </tr>
            <tr>
                <td>Debugger</td>
                <td>Wypisuje komunikaty do do≥πczonego debuggera kodu zarzπdzanego</td>
            </tr>
            <tr>
                <td>File</td>
                <td>Wypisuje komunikaty do pliku lub wielu plikÛw</td>
            </tr>
            <tr>
                <td>Memory</td>
                <td>Wypisuje komunikaty do bufora w pamiÍci</td>
            </tr>
            <tr>
                <td>MessageBox</td>
                <td>Wyúwietla kolejne komunikaty jako wyskakujπce okienka dialogowe</td>
            </tr>
            <tr>
                <td>MethodCall</td>
                <td>Wywo≥uje wskazanπ metodÍ</td>
            </tr>
            <tr>
                <td>Network</td>
                <td>Wysy≥a komunikat za poúrednictwem sieci z wykorzystaniem protoko≥u TCP, UDP lub HTTP</td>
            </tr>
            <tr>
                <td>EventLog</td>
                <td>Zapisuje komunikaty do systemowego dziennika zdarzeÒ</td>
            </tr>
            <tr>
                <td>MSMQ</td>
                <td>Zapisuje komunikaty do kolejki komunikatÛw MSMQ</td>
            </tr>
            <tr>
                <td>NLogViewer</td>
                <td>Wysy≥a komunikat do aplikacji NLogViewer za poúrednictwem sieci.</td>
            </tr>
            <tr>
                <td>Chainsaw</td>
                <td>Wysy≥a komunikat do aplikacji log4j Chainsaw za poúrednictwem sieci.</td>
            </tr>
            <tr>
                <td>Null</td>
                <td>Ignoruje komunikaty</td>
            </tr>
            <tr>
                <td>Trace</td>
                <td>Wysy≥a komunikaty za poúrednictwem <code>System.Diagnostics.Trace</code></td>
            </tr>
        </table>
    </div>
    <p>
        ListÍ tÍ moøna bardzo ≥atwo rozszerzyÊ definiujπc w≥asne wyjúcie i rejestrujπc je w systemie,
        co jest operacjπ bardzo prostπ, wymagajπcπ zwykle napisania tylko kilkunastu linii kodu klasy dziedziczπcej
        z klasy <code>NLog.Target</code>. SzczegÛ≥owe informacje
        na temat tworzenia w≥asnego wyjúcia podano na stronie projektu [2].
    </p>
    <h2>Formatowanie komunikatÛw</h2>
    <p>
        Podczas zapisywania komunikatu diagnostycznego do wyjúcia moøliwe jest wzbogacenie go
        o rÛønego rodzaju informacje kontekstowe. Moøemy na przyk≥ad chcieÊ, aby kaødy
        wiersz w pliku zawiera≥ oprÛÊz komunikatu takøe datÍ, poziom waønoúci komunikatu i
        identyfikator wπtku, z ktÛrego pochodzi komunikat. Nic prostszego - wystarczy w parametrze 
        <code>layout</code> do wyjúcia napisaÊ:
    </p>
    <pre class="xml">${longdate} ${level} ${threadid} ${message}</pre>
    <p>
        A gdybyúmy chcieli wyúwietliÊ takøe wartoúÊ wskazanej zmiennej úrodowiskowej,
        licznika wydajnoúci (performance counter) lub wartoúci zmiennej przechowywanej w sesji ASP.NET lub ASP?
        Jest to rÛwnie proste. Odpowiednie "zaklÍcia" to:
    </p>
    <pre class="xml">${environment:variable=VAR}</pre>
    <pre class="xml">${performancecounter:category=...:counter=...:instance=...}</pre>
    <pre class="xml">${aspnet-session:variable=UserName}</pre>
    <pre class="xml">${asp-session:variable=UserName}</pre>
    <p>
        Informacje kontekstowe moøemy wykorzystaÊ nie tylko do formatowania tekstu wyjúcia, w wielu przypadkach
        moøliwe jest sterowanie parametrami samego wyjúcia. Przyk≥adowo, aby logi z kaødego dnia pracy aplikacji
        trafia≥y do osobnego pliku wystarczy uøyÊ informacji kontekstowych w parametrze <code>filename</code>
        ustawiajπcym nazwÍ pliku:
    </p>
    <xml inline="true" src="examples/article4.nlog" />
    <p>
        Lista informacji kontekstowych, ktÛre moøna wydobyÊ przy pomocy NLog to:
    </p>
    <div class="table">
        <table>
            <tr>
                <th>Nazwa</th>
                <th>Opis</th>
            </tr>
            <tr>
                <td>asp-application</td>
                <td>Zmienna przechowywana w konteúcie aplikacji ASP (klasyczne).</td>
            </tr>
            <tr>
                <td>asp-request</td>
                <td>Parametr wejúciowy øπdania ASP (klasyczne)</td>
            </tr>
            <tr>
                <td>asp-session</td>
                <td>Zmienna sesyjna aplikacji ASP (klasyczne)</td>
            </tr>
            <tr>
                <td>aspnet-application</td>
                <td>Zmienna przechowywana w konteúcie aplikacji ASP.NET.</td>
            </tr>
            <tr>
                <td>aspnet-request</td>
                <td>Parametr wejúciowy øπdania ASP.NET</td>
            </tr>
            <tr>
                <td>aspnet-session</td>
                <td>Zmienna sesyjna aplikacji ASP.NET</td>
            </tr>
            <tr>
                <td>basedir</td>
                <td>Katalog bazowy aplikacji</td>
            </tr>
            <tr>
                <td>callsite</td>
                <td>Informacja o klasie, metodzie, nazwie pliku, numerze wiersza i kolumny z miejsca wywo≥ania</td>
            </tr>
            <tr>
                <td>counter</td>
                <td>Licznik - generuje rosnπce ciπgi liczbowe</td>
            </tr>
            <tr>
                <td>date</td>
                <td>Data i czas w dowolnym formacie</td>
            </tr>
            <tr>
                <td>environment</td>
                <td>WartoúÊ wskazanej zmiennej úrodowiskowej</td>
            </tr>
            <tr>
                <td>exception</td>
                <td>Informacje o wyjπtku zwiπzanym z komunikatem diagnostycznym</td>
            </tr>
            <tr>
                <td>guid</td>
                <td>Globally-unique identifier (GUID) - losowa liczba 128-bitowa unikalna w czasie i przestrzeni</td>
            </tr>
            <tr>
                <td>identity</td>
                <td>Informacja o toøsamoúci wπtku pochodzπca z obiektu <code>IIdentity</code> zwiπzanego z bieøπcym wπtkiem</td>
            </tr>
            <tr>
                <td>level</td>
                <td>Poziom waønoúci komunikatu</td>
            </tr>
            <tr>
                <td>logger</td>
                <td>Nazwa loggera (ürÛd≥a komunikatÛw)</td>
            </tr>
            <tr>
                <td>longdate</td>
                <td>Data i czas w formacie <code>yyyy-MM-dd HH:mm:ss.mmm</code>, dogodnym do sortowania</td>
            </tr>
            <tr>
                <td>machinename</td>
                <td>Nazwa komputera, na ktÛrym dzia≥a aplikacja</td>
            </tr>
            <tr>
                <td>mdc</td>
                <td>Element kontekstu MDC zwiπzanego z bieøπcym wπtkiem (dla kompatybilnoúci z log4net)</td>
            </tr>
            <tr>
                <td>ndc</td>
                <td>Element kontekstu NDC zwiπzanego z bieøπcym wπtkiem (dla kompatybilnoúci z log4net)</td>
            </tr>
            <tr>
                <td>message</td>
                <td>Sformatowany komunikat diagnostyczny</td>
            </tr>
            <tr>
                <td>newline</td>
                <td>Znak koÒca wiersza</td>
            </tr>
            <tr>
                <td>nlogdir</td>
                <td>Katalog, w ktÛrym zainstalowano NLog.dll</td>
            </tr>
            <tr>
                <td>performancecounter</td>
                <td>WartoúÊ licznika wydajnoúci</td>
            </tr>
            <tr>
                <td>processtime</td>
                <td>Czas dzia≥ania procesu w formacie <code>HH:mm:ss.mmm</code></td>
            </tr>
            <tr>
                <td>shortdate</td>
                <td>Data w krÛtkim formacie <code>yyyy-MM-dd</code> dogodnym do sortowania i uøycia w nazwie pliku</td>
            </tr>
            <tr>
                <td>stacktrace</td>
                <td>Stos wywo≥aÒ</td>
            </tr>
            <tr>
                <td>threadid</td>
                <td>Identyfikator bieøπcego wπtku</td>
            </tr>
            <tr>
                <td>threadname</td>
                <td>Nazwa bieøπcego wπtku</td>
            </tr>
            <tr>
                <td>ticks</td>
                <td>WartoúÊ <code>Ticks</code> bieøπcej daty.</td>
            </tr>
            <tr>
                <td>registry</td>
                <td>WartoúÊ przechowywana w rejestrze</td>
            </tr>
            <tr>
                <td>windows-identity</td>
                <td>Nazwa uøytkownika Windows zwiπzana z bieøπcym wπtkiem</td>
            </tr>
        </table>
    </div>
    <p>
        Podobnie jak w przypadku wyjúÊ moøliwe jest ≥atwe dodawanie nowej funkcjonalnoúci pobierania
        informacji kontekstowych, wystarczy napisaÊ w≥asnπ klasÍ dziedziczπcπ z klasy <code>NLog.LayoutRenderer</code>, 
        co jest rÛwnieø szczegÛ≥owo opisane na stronie projektu [2].
    </p>
    <h2>Filtrowanie komunikatÛw</h2>
    <p>
        Jak juø wspomniano wyøej, jednym z g≥Ûwnych zadaÒ biblioteki NLog jest filtrowanie komunikatÛw diagnostycznych.
        W odrÛønieniu od log4net, ktÛre stosuje konfiguracjÍ hierarchicznπ w NLogu zastosowano koncepcjÍ podobnπ do tabeli
        routingu. Dla kaødego komunikatu przeglπdana jest tabela w poszukiwaniu regu≥y pasujπcej do nazwy ürÛd≥a i
        poziomu waønoúci komunikatu i w przypadku pasujπcej wiadomoúci, jest ona zapisywana do wskazanych wyjúÊ.
    </p>
    <p>
        Kaødy wpis w "tabeli routingu komunikatÛw" sk≥ada siÍ z 5 elementÛw. Sπ to:
        <ol>
            <li>Nazwa loggera lub wzorzec nazwy z uøyciem symboli wieloznacznych (*)</li>
            <li>Poziom (lub poziomy) waønoúci komunikatÛw</li>
            <li>Dodatkowe filtry sprawdzajπce elementy inne niø nazwa loggera i poziom waønoúci</li>
            <li>Nazwy wyjúÊ, do ktÛrych ma byÊ zapisany pasujπcy komunikat</li>
            <li>Informacja o tym, czy dalsze regu≥y majπ byÊ sprawdzane</li>
        </ol>
    </p>
    <p>
        Za≥Ûømy, øe mamy nastÍpujπcπ zdefiniowanπ nastÍpujπcπ konfiguracjÍ wyjúÊ (zdefiniowaliúmy dwa wyjúcia plikowe, jedno na standardowe wyjúcie i jedno do bazy danych MSSQL):
    </p>
    <xml inline="true" src="examples/article5.nlog" />
    <p>
        Wyobraümy sobie, øe chcemy zaimplementowaÊ nastÍpujπce regu≥y logowania:
    </p>
    <ol>
        <li>B≥Ídy i ostrzeøenia (Warn, Error ale nie Fatal) muszπ trafiaÊ do pliku <code>errors.log</code> i do bazy danych</li>
        <li>Wszystkie informacje i b≥Ídy w komponencie Gizmo majπ trafiaÊ do bazy danych.</li>
        <li>Wszystkie komunikaty informacyjne i waøniejsze (Info, Warn, Error, Fatal) majπ trafiaÊ do pliku o nazwie takiej jak bieøπca data</li>
        <li>Komunikaty z komponentu FooBar niezaleønie od poziomu waønoúci majπ byÊ ignorowane</li>
    </ol>
    <xml inline="true" src="examples/article6.nlog" />
    <p>
        Powyøsza sekcja <code>&lt;rules&gt;</code> realizuje te wszystkie za≥oøenia. 
        Wydaje siÍ, øe jest ona doúÊ czytelna, ale dla porzπdku przeúledümy:
        <ol>
            <li>Regu≥a numer 4 jest zapisana jako pierwsza. MÛwi ona, øe komunikaty, ktÛrych ürÛd≥o 
                pasuje do wzorca <code>FooBar*</code> (<code>name="FooBar*"</code>) na dowolnym poziomie (<code>minlevel="Trace"</code>)
                nie majπ byÊ nigdzie zapisywane (<code>writeTo=""</code>) i dalsze regu≥y majπ byÊ ignorowane na co wskazuje <code>final="true"</code>. 
                Regu≥a #4 musia≥a byÊ zapisana na poczπtku, gdyø zapewnia to jej wp≥yw na wszystkie komunikaty i umoøliwia odrzucenie niektÛrych z nich 
                jeszcze przed zastosowaniem pozosta≥ych regu≥.</li>
            <li>Regu≥a numer 1 jest zapisana jako druga. MÛwi ona, øe dla wskazanych dwÛch poziomÛw waønoúci (<code>levels="Warn,Error"</code>)
                komunikaty majπ byÊ zapisane do bazy danych i pliku errors.log (<code>writeTo="bledy,bazaDanych"</code>)</li>
            <li>W kolejnym wierszu zapisano regu≥Í numer 2. MÛwi ona, øe komunikaty na poziomie powyøej Info (<code>minlevel="Info"</code>) dla komponentu
                Gizmo* (<code>name="Gizmo*"</code>) trafiajπ do bazy danych (<code>writeTo="bazaDanych"</code>)</li>
            <li>Przedostatni wiersz to implementacja regu≥y nr 3. Jest ona podobna do regu≥y 2, z wyjπkiem innego wzorca
                nazwy ürÛd≥a (<code>name="*"</code>) i innej specyfikacji wyjúcia <code>writeTo="codziennyPlik"</code>)</li>
            <li>Ostatni wiersz to implementacja regu≥y nr 5. Wszystkie komunikaty na poziomie Trace lub wyøszym trafiajπ
            na konsolÍ.</li>
        </ol>
    </p>
    <h2>Przydatne linki</h2>
    <ol>
        <li>Projekt log4net - <a href="http://logging.apache.org/log4net">http://logging.apache.org/log4net</a></li>
        <li>Strona g≥Ûwna projektu - <a href="http://nlog.sourceforge.net/">http://nlog.sourceforge.net/</a></li>
        <li>Strona projektu SF.NET - <a href="http://sourceforge.net/projects/nlog/">http://sourceforge.net/projects/nlog/</a></li>
        <li>Blog autora, gdzie co jakiú czas publikowane sπ informacje o zmianach w NLogu - <a href="http://blog.jkowalski.net/">http://blog.jkowalski.net/</a></li>
        <li>Interfejs TRAC do zg≥aszania b≥ÍdÛw w NLogu - <a href="http://trac.sav.net/nlog">http://trac.sav.net/nlog</a></li>
    </ol>
</content>
