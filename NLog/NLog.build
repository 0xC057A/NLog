<?xml version="1.0" encoding="utf-8" ?>
<project default="build" xmlns="http://nant.sf.net/NAnt.xsd">
    <tstamp />

    <property name="nlog.debug" value="true" />
    <property name="nlog.optimize" value="true" />
    <property name="nlog.define" value="NANT" />

    <property name="scp.program" value="pscp" />
    <property name="scp.program.args" value="-batch -q" />

    <property name="ssh.program" value="plink" />
    <property name="ssh.program.args" value="-batch" />

    <property name="sourceforge.addr" value="jkowalski@nlog.sourceforge.net" />
    <property name="sourceforge.groupdir" value="/home/groups/n/nl/nlog" />

    <property name="installer.name" value="nlog-${tstamp.date}.exe" />
    <property name="source_snapshot.name" value="nlog-${tstamp.date}-src.zip" />
    <property name="binary_snapshot.name" value="nlog-${tstamp.date}-bin.zip" />

    <target name="configure">
        <call target="configure-${framework::get-target-framework()}" />
        <property name="nlog.dir" value="${nant.project.basedir}/build/${framework::get-target-framework()}${if(nlog.debug,'-debug','')}/bin" overwrite="false" />
        <property name="website.dir" value="${nant.project.basedir}/build/${framework::get-target-framework()}${if(nlog.debug,'-debug','')}/doc" overwrite="false" />
        <mkdir dir="${nlog.dir}" />
        <mkdir dir="${website.dir}" />
    </target>

    <target name="build" depends="configure">
        <call target="build-${framework::get-target-framework()}" />
    </target>

    <target name="debug">
        <property name="nlog.debug" value="true" />
        <property name="nlog.optimize" value="false" />
    </target>

    <target name="release">
        <property name="nlog.debug" value="false" />
        <property name="nlog.optimize" value="true" />
    </target>

    <target name="package" depends="build, website, doc">
        <property name="zip.file" value="${nant.project.basedir}/nlog-${framework::get-target-framework()}${if(nlog.debug,'-debug','')}.zip" overwrite="false" />
        <copy file="LICENSE.txt" tofile="${nlog.dir}/../LICENSE.txt" />
        <zip zipfile="${zip.file}">
            <fileset basedir="${nlog.dir}/..">
                <include name="bin/*" />
                <include name="doc/*" />
                <include name="doc/examples/**/*" />
                <include name="doc/help/NLog.chm" />
                <include name="*" />
            </fileset>
        </zip>
    </target>

    <target name="clean" depends="configure">
        <delete dir="${nlog.dir}" />
        <delete dir="${website.dir}" />
    </target>

    <target name="NLog" depends="configure">
        <csc target="library" output="${nlog.dir}/NLog.dll" doc="${nlog.dir}/NLog.xml" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}">
            <sources basedir="src/NLog">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
                <include name="System.Data.dll" />
                <include name="System.Web.dll" />
                <include name="System.Web.Services.dll" />
            </references>
            <nowarn>
                <warning number="1591" />
            </nowarn>
        </csc>
    </target>

    <target name="NLog.ComInterop" depends="NLog">
        <csc target="library" output="${nlog.dir}/NLog.ComInterop.dll" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}">
            <sources basedir="src/NLog.ComInterop">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
            <nowarn>
                <warning number="1591" />
            </nowarn>
        </csc>
    </target>

    <target name="NLog.CompactFramework" depends="NLog">
        <csc target="library" output="${nlog.dir}/NLog.CompactFramework.dll" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}">
            <sources basedir="src/NLog.CompactFramework">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
            <nowarn>
                <warning number="1591" />
            </nowarn>
        </csc>
    </target>

    <target name="NLog.Win32" depends="NLog">
        <csc target="library" output="${nlog.dir}/NLog.Win32.dll" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}">
            <sources basedir="src/NLog.Win32">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
            </references>
            <nowarn>
                <warning number="1591" />
            </nowarn>
        </csc>
    </target>

    <target name="NLog.DotNet" depends="NLog">
        <!-- don't build it yet - we don't have anything .NET-specific -->
        <csc target="library" output="${nlog.dir}/NLog.DotNet.dll" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}">
            <sources basedir="src/NLog.DotNet">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
            </references>
            <nowarn>
                <warning number="1591" />
            </nowarn>
        </csc>
    </target>

    <target name="NLog.Mono" depends="NLog">
        <!-- don't build it yet - we don't have anything Mono-specific -->
        <csc target="library" output="${nlog.dir}/NLog.Mono.dll" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}">
            <sources basedir="src/NLog.Mono">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
            </references>
            <nowarn>
                <warning number="1591" />
            </nowarn>
        </csc>
    </target>

    <target name="NLog.Unix" depends="NLog">
        <csc target="library" output="${nlog.dir}/NLog.Unix.dll" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}">
            <sources basedir="src/NLog.Unix">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
            </references>
            <nowarn>
                <warning number="1591" />
            </nowarn>
        </csc>
    </target>

    <target name="NLog.Test" depends="NLog">
        <csc target="exe" output="${nlog.dir}/NLog.Test.exe" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}">
            <sources basedir="src/NLog.Test">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
        </csc>
        <copy file="src/NLog.Test/App.config" tofile="${nlog.dir}/NLog.Test.exe.config" />
        <copy file="src/NLog.Test/Config1.nlog" tofile="${nlog.dir}/Config1.nlog" />
        <copy file="src/NLog.Test/Config2.nlog" tofile="${nlog.dir}/Config2.nlog" />
    </target>

    <target name="NLog.Benchmark" depends="NLog">
        <csc target="exe" output="${nlog.dir}/NLog.Benchmark.exe" define="${nlog.define}" debug="${nlog.debug}" optimize="${nlog.optimize}">
            <sources basedir="src/NLog.Benchmark">
                <include name="**/*.cs" />
            </sources>
            <references>
                <include name="${nlog.dir}/NLog.dll" />
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.Xml.dll" />
            </references>
        </csc>
        <copy file="src/NLog.Benchmark/App.config" tofile="${nlog.dir}/NLog.Benchmark.exe.config" />
    </target>

    <target name="register-com" depends="configure">
        <exec program="${path::combine(framework::get-framework-directory(framework::get-target-framework()),'regasm.exe')}"
            commandline="/tlb ${nlog.dir}/NLog.ComInterop.dll" />
    </target>

    <target name="register-com-with-codebase" depends="configure">
        <exec program="${path::combine(framework::get-framework-directory(framework::get-target-framework()),'regasm.exe')}"
            commandline="/tlb /codebase ${nlog.dir}/NLog.ComInterop.dll" />
    </target>

    <target name="test" depends="NLog.Test, build">
        <exec program="${nlog.dir}/NLog.Test.exe" workingdir="${nlog.dir}" />
    </target>

    <target name="benchmark" depends="NLog.Benchmark, build">
        <exec program="${nlog.dir}/NLog.Benchmark.exe" workingdir="${nlog.dir}" />
    </target>

    <target name="longbenchmark" depends="NLog.Benchmark, build">
        <exec program="${nlog.dir}/NLog.Benchmark.exe" commandline="long" workingdir="${nlog.dir}" />
    </target>

    <target name="benchmark-all">
        <exec program="nant.exe" commandline="-t:net-1.0 release benchmark" if="${framework::exists('net-1.0')}" />
        <exec program="nant.exe" commandline="-t:net-1.1 release benchmark" if="${framework::exists('net-1.1')}" />
        <exec program="nant.exe" commandline="-t:net-2.0 release benchmark" if="${framework::exists('net-2.0')}" />
        <exec program="nant.exe" commandline="-t:mono-1.0 release benchmark" if="${framework::exists('mono-1.0')}" />
    </target>

    <target name="longbenchmark-all">
        <exec program="nant.exe" commandline="-t:net-1.0 release longbenchmark" if="${framework::exists('net-1.0')}" />
        <exec program="nant.exe" commandline="-t:net-1.1 release longbenchmark" if="${framework::exists('net-1.1')}" />
        <exec program="nant.exe" commandline="-t:net-2.0 release longbenchmark" if="${framework::exists('net-2.0')}" />
        <exec program="nant.exe" commandline="-t:mono-1.0 release longbenchmark" if="${framework::exists('mono-1.0')}" />
    </target>

    <target name="webtest" depends="build">
        <copy todir="webtest/bin">
            <fileset basedir="${nlog.dir}">
                <include name="*.dll" />
            </fileset>
        </copy>
    </target>

    <target name="configure-mono-1.0">
        <property name="nlog.define" value="${nlog.define};MONO;MONO_1_0" />
    </target>
    <target name="configure-net-1.0" />
    <target name="configure-net-1.1" />
    <target name="configure-net-2.0" />

    <target name="configure-netcf-1.0">
        <property name="nlog.define" value="${nlog.define};NETCF;NETCF_1_0" />
    </target>

    <target name="build-mono-1.0" depends="NLog, NLog.Mono" />
    <target name="build-net-1.0" depends="NLog, NLog.Win32, NLog.ComInterop, NLog.DotNet, NLog.Benchmark" />
    <target name="build-net-1.1" depends="NLog, NLog.Win32, NLog.ComInterop, NLog.DotNet, NLog.Benchmark" />
    <target name="build-net-2.0" depends="NLog, NLog.Win32, NLog.ComInterop, NLog.DotNet, NLog.Benchmark" />
    <target name="build-netcf-1.0" depends="NLog, NLog.CompactFramework" />

    <target name="dist">
        <exec program="nant.exe" commandline="-t:net-1.0 release package" if="${framework::exists('net-1.0')}" />
        <exec program="nant.exe" commandline="-t:net-1.1 release package" if="${framework::exists('net-1.1')}" />
        <exec program="nant.exe" commandline="-t:netcf-1.0 release package" if="${framework::exists('netcf-1.0')}" />
        <!--
        <exec program="nant.exe" commandline="-t:net-1.0 debug package" if="${framework::exists('net-1.0')}" />
        <exec program="nant.exe" commandline="-t:net-1.1 release package" if="${framework::exists('net-1.1')}" />
        <exec program="nant.exe" commandline="-t:net-1.1 debug package" if="${framework::exists('net-1.1')}" />
        <exec program="nant.exe" commandline="-t:net-2.0 release package" if="${framework::exists('net-1.1')}" />
        <exec program="nant.exe" commandline="-t:net-2.0 debug package" if="${framework::exists('net-1.1')}" />
        <exec program="nant.exe" commandline="-t:netcf-1.0 debug package" if="${framework::exists('netcf-1.0')}" />
        -->
    </target>

    <target name="updateversion">
        <foreach item="Line" in="Nlog.version" delim=";" property="nlog.version">
            <exec workingdir="${nant.project.basedir}" program="tools/ReplaceVersion.exe" commandline=". ${nlog.version}" />
        </foreach>
    </target>

    <target name="publisher_policy">
        <foreach item="Line" in="Nlog.version" delim="." property="nlog.version.major,nlog.version.minor,nlog.version.build,nlog.version.revision">
            <copy file="src/publisher_policy.config.template" tofile="publisher_policy.config" />
            <xmlpoke file="publisher_policy.config" xpath="/configuration/runtime/ms:assemblyBinding/ms:dependentAssembly/ms:bindingRedirect/@newVersion"
                value="${nlog.version.major}.${nlog.version.minor}.${nlog.version.build}.${nlog.version.revision}">
                <namespaces>
                    <namespace prefix="ms" uri="urn:schemas-microsoft-com:asm.v1" />
                </namespaces>
            </xmlpoke>

            <exec program="${path::combine(framework::get-framework-directory(framework::get-target-framework()),'al.exe')}"
                commandline="/nologo /embed:publisher_policy.config /out:Policy.${nlog.version.major}.${nlog.version.minor}.NLog.dll /keyfile:${path::combine(nant.project.basedir,'src/NLog.snk')}" />
        </foreach>
    </target>

    <target name="website" depends="configure">
        <mkdir dir="${website.dir}" />
        <copy todir="${website.dir}">
            <fileset basedir="doc">
                <include name="examples/**/*" />
                <include name="*.html" />
                <include name="*.css" />
                <include name="*.jpg" />
                <include name="*.gif" />
                <include name="*.js" />
                <exclude name="**/_svn" />
                <exclude name="**/_svn/**" />
            </fileset>
        </copy>
        <style style="doc/appenders.xsl" in="doc/appenders.xml" out="${website.dir}/appenders.html" />
        <style style="doc/layoutappenders.xsl" in="doc/layoutappenders.xml" out="${website.dir}/layoutappenders.html" />
        <style style="doc/filters.xsl" in="doc/filters.xml" out="${website.dir}/filters.html" />
    </target>

    <target name="installer">
        <exec program="nant.exe" commandline="-t:net-1.0 release package build doc" />
        <readregistry property="nsis.dir" key="SOFTWARE\NSIS\" />
        <property name="makensis.exe" value="${nsis.dir}/makensis.exe" />

        <foreach item="Line" in="nlog.version" delim="." property="nlog.major,nlog.minor,nlog.revision,nlog.build">
            <exec program="${makensis.exe}" commandline="/DVERSION=${nlog.major}.${nlog.minor}.${nlog.revision}.${nlog.build} tools\SetupNLog.nsi" />
            <move file="SetupNLog.exe" tofile="${installer.name}" overwrite="true" />
        </foreach>
    </target>

    <target name="doc" depends="configure, NLog">
        <uptodate property="help.uptodate">
            <targetfiles>
                <include name="${website.dir}/help/NLog.chm" />
            </targetfiles>
            <sourcefiles basedir="${nlog.dir}">
                <include name="**/*.dll" />
            </sourcefiles>
        </uptodate>
        <if test="${not help.uptodate}">
            <delete dir="${website.dir}/help" if="${directory::exists(website.dir+'/help')}" />
            <mkdir dir="${website.dir}/help" />
            <ndoc>
                <assemblies basedir="${nlog.dir}">
                    <include name="NLog.dll" />
                </assemblies>
                <documenters>
                    <documenter name="MSDN">
                        <property name="OutputDirectory" value="${website.dir}/help" />
                        <!--
                        <property name="SdkDocVersion" value="${link.sdkdoc.version}" />
                        <property name="SdkLinksOnWeb" value="${link.sdkdoc.web}" />
                        -->
                        <!-- do not filter on namespace -->
                        <property name="NamespaceFilter" value="" />
                        <property name="HtmlHelpName" value="NLog" />
                        <!-- set the name of the application for which docs are generated -->
                        <property name="ApplicationName" value="NLog" />
                        <property name="DocumentAttributes" value="True" />
                        <property name="IncludeAssemblyVersion" value="True" />
                        <property name="ShowMissingParams" value="True" />
                        <property name="ShowMissingReturns" value="True" />
                        <property name="ShowMissingValues" value="True" />
                    </documenter>
                </documenters>
            </ndoc>
        </if>
    </target>

    <target name="publish_website" depends="website">
        <zip zipfile="website.zip">
            <fileset basedir="${website.dir}">
                <include name="*" />
            </fileset>
        </zip>
        <echo message="Uploading the zipped website..." />
        <exec program="${scp.program}" commandline="${scp.program.args} website.zip ${sourceforge.addr}:${sourceforge.groupdir}" />
        <echo message="Unpacking the zipped website..." />
        <exec program="${ssh.program}" commandline="${ssh.program.args} ${sourceforge.addr} ${sourceforge.groupdir}/unpack_website.sh" />
        <echo message="Website deployed." />
    </target>

    <target name="publish_website_help" depends="doc">
        <zip zipfile="help.zip">
            <fileset basedir="${website.dir}/help">
                <include name="**/*" />
                <exclude name="**/NLog.*" />
            </fileset>
        </zip>
        <echo message="Uploading the zipped help..." />
        <exec program="${scp.program}" commandline="${scp.program.args} help.zip ${sourceforge.addr}:${sourceforge.groupdir}" />
        <echo message="Unpacking the zipped help..." />
        <exec program="${ssh.program}" commandline="${ssh.program.args} ${sourceforge.addr} ${sourceforge.groupdir}/unpack_help.sh" />
        <echo message="Help deployed." />
    </target>

    <target name="source_snapshot">
        <delete dir="tmp/source_snapshot" if="${directory::exists('tmp/source_snapshot')}" />
        <property name="tmp.dir" value="tmp/source_snapshot/NLog-${tstamp.date}" overwrite="true" />
        <mkdir dir="tmp/source_snapshot" if="${not directory::exists('tmp/source_snapshot')}" />
        <exec program="svn" commandline="export . ${tmp.dir}" />
        <zip zipfile="${source_snapshot.name}">
            <fileset basedir="tmp/source_snapshot">
                <include name="**/*" />
                <exclude name="_svn" />
            </fileset>
        </zip>
    </target>

    <target name="binary_snapshot">
        <exec program="nant.exe" commandline="-t:net-1.0 release build website package -D:zip.file=${binary_snapshot.name}" />
    </target>

    <target name="astyle">
        <astyle style="NAnt" cleanup="true" >
            <fileset>
                <include name="**/*.cs" />
                <exclude name="**/_*.cs" />
            </fileset>
        </astyle>
    </target>

    <target name="sln">
        <solution configuration="Release" solutionfile="NLog.sln" />
    </target>

    <target name="publish_snapshot" depends="installer, source_snapshot, binary_snapshot">
        <echo message="Uploading ${installer.name}..." />
        <exec program="${scp.program}" commandline="${scp.program.args} ${installer.name} ${sourceforge.addr}:${sourceforge.groupdir}/htdocs/snapshots/" />
        <echo message="Uploading ${source_snapshot.name}..." />
        <exec program="${scp.program}" commandline="${scp.program.args} ${source_snapshot.name} ${sourceforge.addr}:${sourceforge.groupdir}/htdocs/snapshots/" />
        <echo message="Uploading ${binary_snapshot.name}..." />
        <exec program="${scp.program}" commandline="${scp.program.args} ${binary_snapshot.name} ${sourceforge.addr}:${sourceforge.groupdir}/htdocs/snapshots/" />
        <echo message="Fixing permissions..." />
        <exec program="${ssh.program}" commandline="${ssh.program.args} ${sourceforge.addr} ${sourceforge.groupdir}/fix_group_perm.sh" />
    </target>
</project>
