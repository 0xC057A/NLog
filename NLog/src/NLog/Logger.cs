// 
// Copyright (c) 2004 Jaroslaw Kowalski <jaak@polbox.com>
// 
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions 
// are met:
// 
// * Redistributions of source code must retain the above copyright notice, 
//   this list of conditions and the following disclaimer. 
// 
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution. 
// 
// * Neither the name of the Jaroslaw Kowalski nor the names of its 
//   contributors may be used to endorse or promote products derived from this
//   software without specific prior written permission. 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
// 

using System;

namespace NLog
{
    [CLSCompliant(true)]
    public abstract class Logger
    {
        protected abstract void Write(LogLevel level, IFormatProvider formatProvider, string message, object[] args);

        public abstract bool IsEnabled(LogLevel level);
        public abstract bool IsDebugEnabled { get; }
        public abstract bool IsInfoEnabled { get; }
        public abstract bool IsWarnEnabled { get; }
        public abstract bool IsErrorEnabled { get; }
        public abstract bool IsFatalEnabled { get; }

        // the following code has been automatically generated by a PERL script
        // do not hand-modify

#region Log() overloads 

        public void Log(LogLevel level, IFormatProvider formatProvider, string message, params object[] args) { 
            Write(level, formatProvider, message, args); 
        }
        public void Log(LogLevel level, string message, params object[] args) { 
            Write(level, null, message, args);
        }
        public void Log(LogLevel level, string message) {
            Write(level, null, message, null);
        }
        public void Log(LogLevel level, IFormatProvider formatProvider, string message, bool argument) { 
            if (IsEnabled(level))
                Write(level, formatProvider, message, new object[] { argument } ); 
        }
        public void Log(LogLevel level, string message, bool argument) { 
            if (IsEnabled(level))
                Write(level, null, message, new object[] { argument });
        }
        public void Log(LogLevel level, IFormatProvider formatProvider, string message, char argument) { 
            if (IsEnabled(level))
                Write(level, formatProvider, message, new object[] { argument } ); 
        }
        public void Log(LogLevel level, string message, char argument) { 
            if (IsEnabled(level))
                Write(level, null, message, new object[] { argument });
        }
        public void Log(LogLevel level, IFormatProvider formatProvider, string message, byte argument) { 
            if (IsEnabled(level))
                Write(level, formatProvider, message, new object[] { argument } ); 
        }
        public void Log(LogLevel level, string message, byte argument) { 
            if (IsEnabled(level))
                Write(level, null, message, new object[] { argument });
        }
        public void Log(LogLevel level, IFormatProvider formatProvider, string message, string argument) { 
            if (IsEnabled(level))
                Write(level, formatProvider, message, new object[] { argument } ); 
        }
        public void Log(LogLevel level, string message, string argument) { 
            if (IsEnabled(level))
                Write(level, null, message, new object[] { argument });
        }
        public void Log(LogLevel level, IFormatProvider formatProvider, string message, int argument) { 
            if (IsEnabled(level))
                Write(level, formatProvider, message, new object[] { argument } ); 
        }
        public void Log(LogLevel level, string message, int argument) { 
            if (IsEnabled(level))
                Write(level, null, message, new object[] { argument });
        }
        public void Log(LogLevel level, IFormatProvider formatProvider, string message, long argument) { 
            if (IsEnabled(level))
                Write(level, formatProvider, message, new object[] { argument } ); 
        }
        public void Log(LogLevel level, string message, long argument) { 
            if (IsEnabled(level))
                Write(level, null, message, new object[] { argument });
        }
        public void Log(LogLevel level, IFormatProvider formatProvider, string message, float argument) { 
            if (IsEnabled(level))
                Write(level, formatProvider, message, new object[] { argument } ); 
        }
        public void Log(LogLevel level, string message, float argument) { 
            if (IsEnabled(level))
                Write(level, null, message, new object[] { argument });
        }
        public void Log(LogLevel level, IFormatProvider formatProvider, string message, double argument) { 
            if (IsEnabled(level))
                Write(level, formatProvider, message, new object[] { argument } ); 
        }
        public void Log(LogLevel level, string message, double argument) { 
            if (IsEnabled(level))
                Write(level, null, message, new object[] { argument });
        }
        public void Log(LogLevel level, IFormatProvider formatProvider, string message, decimal argument) { 
            if (IsEnabled(level))
                Write(level, formatProvider, message, new object[] { argument } ); 
        }
        public void Log(LogLevel level, string message, decimal argument) { 
            if (IsEnabled(level))
                Write(level, null, message, new object[] { argument });
        }
        public void Log(LogLevel level, IFormatProvider formatProvider, string message, object argument) { 
            if (IsEnabled(level))
                Write(level, formatProvider, message, new object[] { argument } ); 
        }
        public void Log(LogLevel level, string message, object argument) { 
            if (IsEnabled(level))
                Write(level, null, message, new object[] { argument });
        }
        [CLSCompliant(false)]
            public void Log(LogLevel level, IFormatProvider formatProvider, string message, sbyte argument) { 
                if (IsEnabled(level))
                    Write(level, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Log(LogLevel level, string message, sbyte argument) { 
                if (IsEnabled(level))
                    Write(level, null, message, new object[] { argument });
            }
        [CLSCompliant(false)]
            public void Log(LogLevel level, IFormatProvider formatProvider, string message, uint argument) { 
                if (IsEnabled(level))
                    Write(level, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Log(LogLevel level, string message, uint argument) { 
                if (IsEnabled(level))
                    Write(level, null, message, new object[] { argument });
            }
        [CLSCompliant(false)]
            public void Log(LogLevel level, IFormatProvider formatProvider, string message, ulong argument) { 
                if (IsEnabled(level))
                    Write(level, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Log(LogLevel level, string message, ulong argument) { 
                if (IsEnabled(level))
                    Write(level, null, message, new object[] { argument });
            }

#endregion


#region Debug() overloads 

        public void Debug(IFormatProvider formatProvider, string message, params object[] args) { 
            Write(LogLevel.Debug, formatProvider, message, args); 
        }
        public void Debug(string message, params object[] args) { 
            Write(LogLevel.Debug, null, message, args);
        }
        public void Debug(string message) {
            Write(LogLevel.Debug, null, message, null);
        }
        public void Debug(IFormatProvider formatProvider, string message, bool argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, formatProvider, message, new object[] { argument } ); 
        }
        public void Debug(string message, bool argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, null, message, new object[] { argument });
        }
        public void Debug(IFormatProvider formatProvider, string message, char argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, formatProvider, message, new object[] { argument } ); 
        }
        public void Debug(string message, char argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, null, message, new object[] { argument });
        }
        public void Debug(IFormatProvider formatProvider, string message, byte argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, formatProvider, message, new object[] { argument } ); 
        }
        public void Debug(string message, byte argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, null, message, new object[] { argument });
        }
        public void Debug(IFormatProvider formatProvider, string message, string argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, formatProvider, message, new object[] { argument } ); 
        }
        public void Debug(string message, string argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, null, message, new object[] { argument });
        }
        public void Debug(IFormatProvider formatProvider, string message, int argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, formatProvider, message, new object[] { argument } ); 
        }
        public void Debug(string message, int argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, null, message, new object[] { argument });
        }
        public void Debug(IFormatProvider formatProvider, string message, long argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, formatProvider, message, new object[] { argument } ); 
        }
        public void Debug(string message, long argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, null, message, new object[] { argument });
        }
        public void Debug(IFormatProvider formatProvider, string message, float argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, formatProvider, message, new object[] { argument } ); 
        }
        public void Debug(string message, float argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, null, message, new object[] { argument });
        }
        public void Debug(IFormatProvider formatProvider, string message, double argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, formatProvider, message, new object[] { argument } ); 
        }
        public void Debug(string message, double argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, null, message, new object[] { argument });
        }
        public void Debug(IFormatProvider formatProvider, string message, decimal argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, formatProvider, message, new object[] { argument } ); 
        }
        public void Debug(string message, decimal argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, null, message, new object[] { argument });
        }
        public void Debug(IFormatProvider formatProvider, string message, object argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, formatProvider, message, new object[] { argument } ); 
        }
        public void Debug(string message, object argument) { 
            if (IsEnabled(LogLevel.Debug))
                Write(LogLevel.Debug, null, message, new object[] { argument });
        }
        [CLSCompliant(false)]
            public void Debug(IFormatProvider formatProvider, string message, sbyte argument) { 
                if (IsEnabled(LogLevel.Debug))
                    Write(LogLevel.Debug, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Debug(string message, sbyte argument) { 
                if (IsEnabled(LogLevel.Debug))
                    Write(LogLevel.Debug, null, message, new object[] { argument });
            }
        [CLSCompliant(false)]
            public void Debug(IFormatProvider formatProvider, string message, uint argument) { 
                if (IsEnabled(LogLevel.Debug))
                    Write(LogLevel.Debug, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Debug(string message, uint argument) { 
                if (IsEnabled(LogLevel.Debug))
                    Write(LogLevel.Debug, null, message, new object[] { argument });
            }
        [CLSCompliant(false)]
            public void Debug(IFormatProvider formatProvider, string message, ulong argument) { 
                if (IsEnabled(LogLevel.Debug))
                    Write(LogLevel.Debug, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Debug(string message, ulong argument) { 
                if (IsEnabled(LogLevel.Debug))
                    Write(LogLevel.Debug, null, message, new object[] { argument });
            }

#endregion


#region Info() overloads 

        public void Info(IFormatProvider formatProvider, string message, params object[] args) { 
            Write(LogLevel.Info, formatProvider, message, args); 
        }
        public void Info(string message, params object[] args) { 
            Write(LogLevel.Info, null, message, args);
        }
        public void Info(string message) {
            Write(LogLevel.Info, null, message, null);
        }
        public void Info(IFormatProvider formatProvider, string message, bool argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, formatProvider, message, new object[] { argument } ); 
        }
        public void Info(string message, bool argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, null, message, new object[] { argument });
        }
        public void Info(IFormatProvider formatProvider, string message, char argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, formatProvider, message, new object[] { argument } ); 
        }
        public void Info(string message, char argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, null, message, new object[] { argument });
        }
        public void Info(IFormatProvider formatProvider, string message, byte argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, formatProvider, message, new object[] { argument } ); 
        }
        public void Info(string message, byte argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, null, message, new object[] { argument });
        }
        public void Info(IFormatProvider formatProvider, string message, string argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, formatProvider, message, new object[] { argument } ); 
        }
        public void Info(string message, string argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, null, message, new object[] { argument });
        }
        public void Info(IFormatProvider formatProvider, string message, int argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, formatProvider, message, new object[] { argument } ); 
        }
        public void Info(string message, int argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, null, message, new object[] { argument });
        }
        public void Info(IFormatProvider formatProvider, string message, long argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, formatProvider, message, new object[] { argument } ); 
        }
        public void Info(string message, long argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, null, message, new object[] { argument });
        }
        public void Info(IFormatProvider formatProvider, string message, float argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, formatProvider, message, new object[] { argument } ); 
        }
        public void Info(string message, float argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, null, message, new object[] { argument });
        }
        public void Info(IFormatProvider formatProvider, string message, double argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, formatProvider, message, new object[] { argument } ); 
        }
        public void Info(string message, double argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, null, message, new object[] { argument });
        }
        public void Info(IFormatProvider formatProvider, string message, decimal argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, formatProvider, message, new object[] { argument } ); 
        }
        public void Info(string message, decimal argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, null, message, new object[] { argument });
        }
        public void Info(IFormatProvider formatProvider, string message, object argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, formatProvider, message, new object[] { argument } ); 
        }
        public void Info(string message, object argument) { 
            if (IsEnabled(LogLevel.Info))
                Write(LogLevel.Info, null, message, new object[] { argument });
        }
        [CLSCompliant(false)]
            public void Info(IFormatProvider formatProvider, string message, sbyte argument) { 
                if (IsEnabled(LogLevel.Info))
                    Write(LogLevel.Info, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Info(string message, sbyte argument) { 
                if (IsEnabled(LogLevel.Info))
                    Write(LogLevel.Info, null, message, new object[] { argument });
            }
        [CLSCompliant(false)]
            public void Info(IFormatProvider formatProvider, string message, uint argument) { 
                if (IsEnabled(LogLevel.Info))
                    Write(LogLevel.Info, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Info(string message, uint argument) { 
                if (IsEnabled(LogLevel.Info))
                    Write(LogLevel.Info, null, message, new object[] { argument });
            }
        [CLSCompliant(false)]
            public void Info(IFormatProvider formatProvider, string message, ulong argument) { 
                if (IsEnabled(LogLevel.Info))
                    Write(LogLevel.Info, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Info(string message, ulong argument) { 
                if (IsEnabled(LogLevel.Info))
                    Write(LogLevel.Info, null, message, new object[] { argument });
            }

#endregion


#region Warn() overloads 

        public void Warn(IFormatProvider formatProvider, string message, params object[] args) { 
            Write(LogLevel.Warn, formatProvider, message, args); 
        }
        public void Warn(string message, params object[] args) { 
            Write(LogLevel.Warn, null, message, args);
        }
        public void Warn(string message) {
            Write(LogLevel.Warn, null, message, null);
        }
        public void Warn(IFormatProvider formatProvider, string message, bool argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, formatProvider, message, new object[] { argument } ); 
        }
        public void Warn(string message, bool argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, null, message, new object[] { argument });
        }
        public void Warn(IFormatProvider formatProvider, string message, char argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, formatProvider, message, new object[] { argument } ); 
        }
        public void Warn(string message, char argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, null, message, new object[] { argument });
        }
        public void Warn(IFormatProvider formatProvider, string message, byte argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, formatProvider, message, new object[] { argument } ); 
        }
        public void Warn(string message, byte argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, null, message, new object[] { argument });
        }
        public void Warn(IFormatProvider formatProvider, string message, string argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, formatProvider, message, new object[] { argument } ); 
        }
        public void Warn(string message, string argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, null, message, new object[] { argument });
        }
        public void Warn(IFormatProvider formatProvider, string message, int argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, formatProvider, message, new object[] { argument } ); 
        }
        public void Warn(string message, int argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, null, message, new object[] { argument });
        }
        public void Warn(IFormatProvider formatProvider, string message, long argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, formatProvider, message, new object[] { argument } ); 
        }
        public void Warn(string message, long argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, null, message, new object[] { argument });
        }
        public void Warn(IFormatProvider formatProvider, string message, float argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, formatProvider, message, new object[] { argument } ); 
        }
        public void Warn(string message, float argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, null, message, new object[] { argument });
        }
        public void Warn(IFormatProvider formatProvider, string message, double argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, formatProvider, message, new object[] { argument } ); 
        }
        public void Warn(string message, double argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, null, message, new object[] { argument });
        }
        public void Warn(IFormatProvider formatProvider, string message, decimal argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, formatProvider, message, new object[] { argument } ); 
        }
        public void Warn(string message, decimal argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, null, message, new object[] { argument });
        }
        public void Warn(IFormatProvider formatProvider, string message, object argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, formatProvider, message, new object[] { argument } ); 
        }
        public void Warn(string message, object argument) { 
            if (IsEnabled(LogLevel.Warn))
                Write(LogLevel.Warn, null, message, new object[] { argument });
        }
        [CLSCompliant(false)]
            public void Warn(IFormatProvider formatProvider, string message, sbyte argument) { 
                if (IsEnabled(LogLevel.Warn))
                    Write(LogLevel.Warn, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Warn(string message, sbyte argument) { 
                if (IsEnabled(LogLevel.Warn))
                    Write(LogLevel.Warn, null, message, new object[] { argument });
            }
        [CLSCompliant(false)]
            public void Warn(IFormatProvider formatProvider, string message, uint argument) { 
                if (IsEnabled(LogLevel.Warn))
                    Write(LogLevel.Warn, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Warn(string message, uint argument) { 
                if (IsEnabled(LogLevel.Warn))
                    Write(LogLevel.Warn, null, message, new object[] { argument });
            }
        [CLSCompliant(false)]
            public void Warn(IFormatProvider formatProvider, string message, ulong argument) { 
                if (IsEnabled(LogLevel.Warn))
                    Write(LogLevel.Warn, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Warn(string message, ulong argument) { 
                if (IsEnabled(LogLevel.Warn))
                    Write(LogLevel.Warn, null, message, new object[] { argument });
            }

#endregion


#region Error() overloads 

        public void Error(IFormatProvider formatProvider, string message, params object[] args) { 
            Write(LogLevel.Error, formatProvider, message, args); 
        }
        public void Error(string message, params object[] args) { 
            Write(LogLevel.Error, null, message, args);
        }
        public void Error(string message) {
            Write(LogLevel.Error, null, message, null);
        }
        public void Error(IFormatProvider formatProvider, string message, bool argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, formatProvider, message, new object[] { argument } ); 
        }
        public void Error(string message, bool argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, null, message, new object[] { argument });
        }
        public void Error(IFormatProvider formatProvider, string message, char argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, formatProvider, message, new object[] { argument } ); 
        }
        public void Error(string message, char argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, null, message, new object[] { argument });
        }
        public void Error(IFormatProvider formatProvider, string message, byte argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, formatProvider, message, new object[] { argument } ); 
        }
        public void Error(string message, byte argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, null, message, new object[] { argument });
        }
        public void Error(IFormatProvider formatProvider, string message, string argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, formatProvider, message, new object[] { argument } ); 
        }
        public void Error(string message, string argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, null, message, new object[] { argument });
        }
        public void Error(IFormatProvider formatProvider, string message, int argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, formatProvider, message, new object[] { argument } ); 
        }
        public void Error(string message, int argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, null, message, new object[] { argument });
        }
        public void Error(IFormatProvider formatProvider, string message, long argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, formatProvider, message, new object[] { argument } ); 
        }
        public void Error(string message, long argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, null, message, new object[] { argument });
        }
        public void Error(IFormatProvider formatProvider, string message, float argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, formatProvider, message, new object[] { argument } ); 
        }
        public void Error(string message, float argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, null, message, new object[] { argument });
        }
        public void Error(IFormatProvider formatProvider, string message, double argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, formatProvider, message, new object[] { argument } ); 
        }
        public void Error(string message, double argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, null, message, new object[] { argument });
        }
        public void Error(IFormatProvider formatProvider, string message, decimal argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, formatProvider, message, new object[] { argument } ); 
        }
        public void Error(string message, decimal argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, null, message, new object[] { argument });
        }
        public void Error(IFormatProvider formatProvider, string message, object argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, formatProvider, message, new object[] { argument } ); 
        }
        public void Error(string message, object argument) { 
            if (IsEnabled(LogLevel.Error))
                Write(LogLevel.Error, null, message, new object[] { argument });
        }
        [CLSCompliant(false)]
            public void Error(IFormatProvider formatProvider, string message, sbyte argument) { 
                if (IsEnabled(LogLevel.Error))
                    Write(LogLevel.Error, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Error(string message, sbyte argument) { 
                if (IsEnabled(LogLevel.Error))
                    Write(LogLevel.Error, null, message, new object[] { argument });
            }
        [CLSCompliant(false)]
            public void Error(IFormatProvider formatProvider, string message, uint argument) { 
                if (IsEnabled(LogLevel.Error))
                    Write(LogLevel.Error, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Error(string message, uint argument) { 
                if (IsEnabled(LogLevel.Error))
                    Write(LogLevel.Error, null, message, new object[] { argument });
            }
        [CLSCompliant(false)]
            public void Error(IFormatProvider formatProvider, string message, ulong argument) { 
                if (IsEnabled(LogLevel.Error))
                    Write(LogLevel.Error, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Error(string message, ulong argument) { 
                if (IsEnabled(LogLevel.Error))
                    Write(LogLevel.Error, null, message, new object[] { argument });
            }

#endregion


#region Fatal() overloads 

        public void Fatal(IFormatProvider formatProvider, string message, params object[] args) { 
            Write(LogLevel.Fatal, formatProvider, message, args); 
        }
        public void Fatal(string message, params object[] args) { 
            Write(LogLevel.Fatal, null, message, args);
        }
        public void Fatal(string message) {
            Write(LogLevel.Fatal, null, message, null);
        }
        public void Fatal(IFormatProvider formatProvider, string message, bool argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, formatProvider, message, new object[] { argument } ); 
        }
        public void Fatal(string message, bool argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, null, message, new object[] { argument });
        }
        public void Fatal(IFormatProvider formatProvider, string message, char argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, formatProvider, message, new object[] { argument } ); 
        }
        public void Fatal(string message, char argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, null, message, new object[] { argument });
        }
        public void Fatal(IFormatProvider formatProvider, string message, byte argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, formatProvider, message, new object[] { argument } ); 
        }
        public void Fatal(string message, byte argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, null, message, new object[] { argument });
        }
        public void Fatal(IFormatProvider formatProvider, string message, string argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, formatProvider, message, new object[] { argument } ); 
        }
        public void Fatal(string message, string argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, null, message, new object[] { argument });
        }
        public void Fatal(IFormatProvider formatProvider, string message, int argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, formatProvider, message, new object[] { argument } ); 
        }
        public void Fatal(string message, int argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, null, message, new object[] { argument });
        }
        public void Fatal(IFormatProvider formatProvider, string message, long argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, formatProvider, message, new object[] { argument } ); 
        }
        public void Fatal(string message, long argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, null, message, new object[] { argument });
        }
        public void Fatal(IFormatProvider formatProvider, string message, float argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, formatProvider, message, new object[] { argument } ); 
        }
        public void Fatal(string message, float argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, null, message, new object[] { argument });
        }
        public void Fatal(IFormatProvider formatProvider, string message, double argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, formatProvider, message, new object[] { argument } ); 
        }
        public void Fatal(string message, double argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, null, message, new object[] { argument });
        }
        public void Fatal(IFormatProvider formatProvider, string message, decimal argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, formatProvider, message, new object[] { argument } ); 
        }
        public void Fatal(string message, decimal argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, null, message, new object[] { argument });
        }
        public void Fatal(IFormatProvider formatProvider, string message, object argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, formatProvider, message, new object[] { argument } ); 
        }
        public void Fatal(string message, object argument) { 
            if (IsEnabled(LogLevel.Fatal))
                Write(LogLevel.Fatal, null, message, new object[] { argument });
        }
        [CLSCompliant(false)]
            public void Fatal(IFormatProvider formatProvider, string message, sbyte argument) { 
                if (IsEnabled(LogLevel.Fatal))
                    Write(LogLevel.Fatal, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Fatal(string message, sbyte argument) { 
                if (IsEnabled(LogLevel.Fatal))
                    Write(LogLevel.Fatal, null, message, new object[] { argument });
            }
        [CLSCompliant(false)]
            public void Fatal(IFormatProvider formatProvider, string message, uint argument) { 
                if (IsEnabled(LogLevel.Fatal))
                    Write(LogLevel.Fatal, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Fatal(string message, uint argument) { 
                if (IsEnabled(LogLevel.Fatal))
                    Write(LogLevel.Fatal, null, message, new object[] { argument });
            }
        [CLSCompliant(false)]
            public void Fatal(IFormatProvider formatProvider, string message, ulong argument) { 
                if (IsEnabled(LogLevel.Fatal))
                    Write(LogLevel.Fatal, formatProvider, message, new object[] { argument } ); 
            }
        [CLSCompliant(false)]
            public void Fatal(string message, ulong argument) { 
                if (IsEnabled(LogLevel.Fatal))
                    Write(LogLevel.Fatal, null, message, new object[] { argument });
            }

#endregion

    }
}
